/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.model {	import uk.ac.sussex.model.valueObjects.MarketAsset;	import org.puremvc.as3.multicore.interfaces.IProxy;	import org.puremvc.as3.multicore.patterns.proxy.Proxy;		public class MarketAssetsListProxy extends Proxy implements IProxy {		public static const NAME:String = "MarketAssetsListProxy";		public static const ASSET_ADDED:String = "MarketAssetAdded";		public static const ASSET_UPDATED:String = "MarketAssetUpdated";				public function MarketAssetsListProxy() {			data = new Array();			super(NAME, data);		}		public function addAsset(newAsset:MarketAsset):void {			trace("MarketAssetsListProxy sez: We're adding an asset - " + newAsset.getAsset().getName());			var foundAsset:Boolean = false;			var newMAId:int = newAsset.getId();			for each (var ma:MarketAsset in maList){				if(!foundAsset){					foundAsset = (ma.getId() == newMAId);				}			}			if(!foundAsset){				maList.push(newAsset);			} else {				this.updateAsset(ma);			}			sendNotification(ASSET_ADDED, newAsset);		}		public function getAssetCount():int {			return this.maList.length;		}		public function fetchAssets():Array {			return maList.sort(sortOnAssetName);		}		public function updateAsset(ma:MarketAsset):void {			var assetId:int = ma.getId();			for each (var asset:MarketAsset in maList){				if(asset.getId()==assetId){					//What's actually likely to have changed?					asset.setAmount(ma.getAmount());					asset.setBuyPrice(ma.getBuyPrice());					asset.setSellPrice(ma.getSellPrice());					sendNotification(ASSET_UPDATED, asset);					break;				}			}		}		public function getAsset(assetId:int):MarketAsset{			for each (var asset:MarketAsset in maList){				if(asset.getId()==assetId){					return asset;				}			}			return null;		}		public function getMarketAssetByAssetId(gameAssetId:int):MarketAsset{			for each (var marketAsset:MarketAsset in maList){				if(marketAsset.getAsset().getId() == gameAssetId){					return marketAsset;				}			}		}		protected function get maList():Array {			return data as Array;		}		private function sortOnAssetName(a:MarketAsset, b:MarketAsset):int {			if(a.getAsset()==null || b.getAsset()==null){				return 0;			}			var aName:String = a.getAsset().getName();			var bName:String = b.getAsset().getName();			if(aName>bName){				return 1;			} else if (aName<bName) {				return -1;			} else {				return 0;			}		}	}}
package uk.ac.sussex.model.valueObjects {	import flash.events.Event;	import flash.events.EventDispatcher;	/**	 * @author em97	 */	public class FormField extends EventDispatcher{		private var fieldName:String;		private var fieldLabel:String;		private var fieldType:String;		private var fieldValue:String;		private var fieldAllowedChars:String = null; // This is used on text fields, so follows the rules for restrict.		private var maxLength:int; //Defaults to 0, meaning any length. 		private var fieldError:Boolean;		private var optional:Boolean;		private var enabled:Boolean;		private var parentForm:Form;		private var possibleValues:Array;		private var defaultValue:String;		private var changeNotification:String;		private var local_show:Boolean = true;		//private var observers:Array = null;		//private var modifier:FormFieldModifier = null;				public static const TYPE_TEXTINPUT:String = "Type_TextInput";		public static const TYPE_TEXTHIDDEN:String = "Type_TextHidden";		public static const TYPE_BACKEND:String = "Type_Backend"; //This is for e.g. field ids		public static const TYPE_LABEL:String = "Type_Label"; //For display only, not entry.		public static const TYPE_RADIO:String = "Type_Radio"; //Starting to get more complicated. 		public static const TYPE_DROPDOWN:String = "Type_Dropdown"; //Cry.				public static const REQUIRED:int = 0;		public static const OPTIONAL:int = 1;		public static const DISABLED:int = -1;				public static const VALUE_CHANGED:String = "FormFieldValueChanged";		public static const ENABLED_CHANGED:String = "FormFieldEnabledChanged";		public static const OPTIONS_UPDATED:String = "FormFieldOptionsUpdated";				public function FormField(){					}		public function setFieldName(newName:String):void {			fieldName = newName;		}		public function getFieldName():String {			return fieldName;		}		public function setFieldLabel(newLabel:String):void {			fieldLabel = newLabel; 		}		public function getFieldLabel():String {			return fieldLabel;		}		/**		 * @param newType should be one of the public TYPE constants associated with this class.		 */		public function setFieldType(newType:String):void {			//TODO: Check it's one of my allowed types.			fieldType = newType; 		}		public function getFieldType():String {			return fieldType;		}		public function setFieldValue(newValue:String):void {			fieldValue = newValue;			this.dispatchEvent(new Event(VALUE_CHANGED));		}		public function getFieldValue():String {			return fieldValue;		}		/**		 * @param allowedChars follows the format of the TextField restrict property		 * see http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/text/TextField.html#restrict		 */		public function setAllowedChars(allowedChars:String):void {			this.fieldAllowedChars = allowedChars;		}		public function getAllowedChars():String {			return this.fieldAllowedChars;		}		public function setMaxLength(maxLength:int):void {			this.maxLength = maxLength;		}		public function getMaxLength():int {			return this.maxLength;		}		public function getFieldError():Boolean {			return fieldError;		}		public function setOptional(isOptional:Boolean):void{			optional = isOptional;		}		public function getOptional():Boolean {			return optional;		}		public function setEnabled(isEnabled:Boolean):void {			this.enabled = isEnabled;			this.dispatchEvent(new Event(ENABLED_CHANGED));		}		public function getEnabled():Boolean{			return this.enabled;		}		public function getParent():Form {			return this.parentForm;		}		public function setParent(form:Form):void {			this.parentForm = form;		}		/**		 * @param values An array of FormFieldOption values. 		 */		public function setPossibleValues(values:Array):void {			//Should really check, but each of these ought to be a FormFieldOption.			for each (var arrayObj:Object in values){				var possValue:FormFieldOption = arrayObj as FormFieldOption;				if (possValue == null){					throw Error("FormField " + this.fieldName + " has an invalid option.");				}			}			if(values!=null){				values = values.sort(sortFormFieldOptions);			}			this.possibleValues = values;			this.dispatchEvent(new Event(FormField.OPTIONS_UPDATED));		}		public function getPossibleValues():Array {			return this.possibleValues;		}		public function getChangeNotification():String {			return this.changeNotification;		}		public function setChangeNotification(newNotification:String):void {			this.changeNotification = newNotification;		}		public function resetValueToDefault():void {			this.setFieldValue(this.defaultValue);		}		public function setDefaultValue(newValue:String):void {			this.defaultValue = newValue;		}		public function get show():Boolean {			return this.local_show;		}		public function set show(show:Boolean):void {			this.local_show = show;		}		private function sortFormFieldOptions(a:FormFieldOption, b:FormFieldOption):int {			var aName:String = a.getDisplayName();			var bName:String = b.getDisplayName();			if(aName>bName){				return 1;			} else if (aName<bName) {				return -1;			} else {				return 0;			}		}	}}
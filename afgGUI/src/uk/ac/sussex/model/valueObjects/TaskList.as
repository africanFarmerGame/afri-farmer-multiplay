/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.model.valueObjects {	/**	 * @author em97	 */	public class TaskList {		private var potentialTasks:Array;		private var householdTasks:Array;				public function TaskList():void {			potentialTasks = new Array();			householdTasks = new Array();		}				public function getPotentialTasks():Array {			return potentialTasks.sort(sortPotentialTasks);		}		/**		 * @param newPTs Array of potential tasks to store. 		 */		public function setPotentialTasks(newPTs:Array):void {			this.potentialTasks = newPTs;		}		public function addPotentialTask(newPT:PotentialTask):void {			//Check whether it's here already or not.			trace("TaskList sez: we have a new potential task of type " + newPT.getType());			var foundTask:Boolean = false;			var newPTType:String = newPT.getType(); 			var newList:Array = new Array();			for each (var pt:PotentialTask in potentialTasks){				if(pt.getType()==newPTType){					newList.push(newPT);					foundTask = true;				} else {					newList.push(pt);				}			}			if(!foundTask){				newList.push(newPT);			}			potentialTasks = newList;			trace("TaskListProxy sez: We have " + potentialTasks.length + " potential tasks");		}		public function setHouseholdTasks(newTasks:Array):void {			for each (var task:Task in newTasks){				this.updateOrAddHouseholdTask(task);			}		}		public function addHouseholdTask(task:Task):void {			this.updateOrAddHouseholdTask(task);		}		public function getHouseholdTasks():Array {			return householdTasks;		}		public function retrievePotentialTask(taskType:String):PotentialTask {			for each (var pt:PotentialTask in potentialTasks){				if(pt.getType()==taskType){					return pt;				}			}		}		public function retrieveTask(taskId:int):Task {			for each (var task:Task in householdTasks){				if(task.getId()== taskId){					return task;				}			}		}		private function updateOrAddHouseholdTask(task:Task):void {			var found:Boolean = false;			var newTaskId:int = task.getId();			for each (var currentTask:Task in householdTasks){				if(!found){					if(currentTask.getId() == newTaskId){						found = true;						currentTask.setActor(task.getActor());						currentTask.setAsset(task.getAsset());						currentTask.setAssetAmount(task.getAssetAmount());						currentTask.setDeleted(task.getDeleted());						currentTask.setHearthId(task.getHearthId());						currentTask.setLocation(task.getLocation());						currentTask.setNotes(task.getNotes());						currentTask.setReadonly(task.getReadonly());						currentTask.setStatus(task.getStatus());						currentTask.setTaskNumber(task.getTaskNumber());						currentTask.setType(task.getType());						currentTask.setTypeDisplay(task.getTypeDisplay());					}				}			}			if(!found){				householdTasks.unshift(task);			}			householdTasks.sort(sortOrderIdDesc);		}		private function sortOrderIdDesc(a:Task, b:Task):int { 			var ida:int = a.getId(); 			var idb:int = b.getId(); 			if (ida < idb) { 				return 1;			} else if (ida > idb) {				return -1;     		} else { 		        return 0; 			} 		}		/**		private function getTask(taskId:int):Task{			for each (var currentTask:Task in householdTasks){				if(currentTask.getId() == taskId){					return currentTask;				}			}			return null;		}*/		private function sortPotentialTasks(a:PotentialTask, b:PotentialTask):int{			var aName:String = a.getName();			var bName:String = b.getName();			if(aName>bName){				return 1;			} else if (aName<bName){				return -1;			} else {				return 0;			}		}	}}
/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.model.valueObjects.requestParams {	import uk.ac.sussex.model.valueObjects.*;	import com.smartfoxserver.v2.entities.data.SFSObject;	import uk.ac.sussex.model.valueObjects.requestParams.DataParam;	/**	 * @author em97	 */	public class DataParamTask extends DataParam {		private static const ID:String = "Id";		private static const TYPE:String = "Type";		private static const TYPE_DISPLAY:String = "TypeDisplay";		private static const ACTOR:String = "Actor";		private static const LOCATION_ID :String = "LocationId";		private static const LOCATION_NAME:String = "LocationName";		private static const LOCATION_TYPE:String = "LocationType";		private static const ASSET:String = "Asset";		private static const ASSET_AMOUNT:String = "AssetAmount";		private static const HEARTH:String = "Hearth";		private static const STATUS:String = "Status";		private static const NOTES:String = "Notes";		private static const TASK_NUMBER:String = "TaskNumber";		private static const READONLY:String = "Readonly";		private static const DELETED:String = "Deleted";		private static const SEASON_ID:String = "SeasonId";				public function DataParamTask(paramName : String) {			super(paramName);		}		override public function getParamValue() {			var value:Task = this.paramValue as Task;			return value;		}		override public function setParamValue(paramValue) {			var value:Task = paramValue as Task;			this.paramValue = value;		}		override public function addToServerParam(existingObject:SFSObject):SFSObject {			var task:Task = this.getParamValue() as Task;			var taskObj:SFSObject = SFSObject.newInstance();			taskObj.putInt(ID, task.getId());			taskObj.putUtfString(TYPE, task.getType());			taskObj.putInt(ACTOR, task.getActor().getId());			taskObj.putInt("Location", task.getLocation().getId());			taskObj.putInt(ASSET, task.getAsset().getId());			existingObject.putSFSObject(this.getParamName(), taskObj);			return existingObject;		}		override public function translateFromServerParam(existingObject:SFSObject):SFSObject {			var taskObj:SFSObject = existingObject.getSFSObject(this.getParamName()) as SFSObject;			var task:Task = DataParamTask.translateFromSFStoClass(taskObj);			this.setParamValue(task);			return existingObject;		}		public static function translateFromSFStoClass(taskObj:SFSObject):Task{			var task:Task = new Task();			task.setId(taskObj.getInt(ID));			task.setType(taskObj.getUtfString(TYPE));			task.setTypeDisplay(taskObj.getUtfString(TYPE_DISPLAY));			task.setAssetAmount(taskObj.getInt(ASSET_AMOUNT));			task.setStatus(taskObj.getInt(STATUS));			task.setNotes(taskObj.getUtfString(NOTES));						var actorObj:SFSObject = taskObj.getSFSObject("Actor") as SFSObject;			if(actorObj!=null){				var actor:AnyChar = new AnyChar();				actor.setId(actorObj.getInt("id"));				actor.setFamilyName(actorObj.getUtfString("familyname"));				actor.setFirstName(actorObj.getUtfString("firstname"));				actor.setRole(actorObj.getUtfString("role"));								task.setActor(actor);			}			var location:TaskLocation = new TaskLocation();			location.setId(taskObj.getInt(LOCATION_ID));			location.setName(taskObj.getUtfString(LOCATION_NAME));			location.setType(taskObj.getUtfString(LOCATION_TYPE));			task.setLocation(location);			var asset:GameAsset = new GameAsset();			asset.setId(taskObj.getInt(ASSET));			task.setAsset(asset);			task.setHearthId(taskObj.getInt(HEARTH));			task.setTaskNumber(taskObj.getInt(TASK_NUMBER));			task.setReadonly((taskObj.getInt(READONLY)==1));			task.setDeleted((taskObj.getInt(DELETED)==1));			task.setSeasonId(taskObj.getInt(SEASON_ID));			return task;		}	}}
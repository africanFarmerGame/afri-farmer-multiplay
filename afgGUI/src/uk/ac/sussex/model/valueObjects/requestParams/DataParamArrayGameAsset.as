package uk.ac.sussex.model.valueObjects.requestParams {	import uk.ac.sussex.model.valueObjects.GameAsset;		import com.smartfoxserver.v2.entities.data.SFSObject;	import com.smartfoxserver.v2.entities.data.SFSArray;		public class DataParamArrayGameAsset extends DataParamArray {		public static const FIELD_MEASUREMENT:String = "Measurement";		public static const FIELD_TYPE:String = "Type";		public static const FIELD_SUBTYPE:String = "Subtype";		public static const FIELD_ID:String = "Id";				public function DataParamArrayGameAsset(paramName : String) {			super(paramName);		}		override public function addToServerParam(existingObject:SFSObject):SFSObject {			//Don't think I need to worry about this. 			return existingObject;		}		override public function translateFromServerParam(existingObject:SFSObject):SFSObject {			var sfsArray:SFSArray = existingObject.getSFSArray(this.getParamName()) as SFSArray;			if(sfsArray != null){				var sfsSize:int = sfsArray.size();				var myValue:Array = new Array();								for (var i:int = 0; i < sfsSize; i++) {					var item:GameAsset = new GameAsset();					var assetSFSObj:SFSObject = sfsArray.getSFSObject(i) as SFSObject;					item.setId(assetSFSObj.getInt("Id"));					item.setMeasurement(assetSFSObj.getUtfString("Measurement"));					item.setName(assetSFSObj.getUtfString("Name"));					item.setType(assetSFSObj.getUtfString("Type"));					item.setSubtype(assetSFSObj.getUtfString("Subtype"));					item.setEdible((assetSFSObj.getInt("Edible")==1));					item.setNotes(assetSFSObj.getUtfString("Notes"));					myValue.push(item);				}			}			this.setParamValue(myValue);			return existingObject;		}	}	}
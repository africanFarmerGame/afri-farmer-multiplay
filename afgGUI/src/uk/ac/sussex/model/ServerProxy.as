package uk.ac.sussex.model {		import org.puremvc.as3.multicore.interfaces.*;	import org.puremvc.as3.multicore.patterns.proxy.Proxy;		import com.smartfoxserver.v2.SmartFox;	import com.smartfoxserver.v2.core.SFSEvent;	import flash.events.Event;	import com.smartfoxserver.v2.requests.LoginRequest;	import uk.ac.sussex.model.valueObjects.*;	import uk.ac.sussex.model.valueObjects.requestParams.*;	import uk.ac.sussex.general.ApplicationFacade;	import com.smartfoxserver.v2.entities.data.SFSObject;	import com.smartfoxserver.v2.requests.ExtensionRequest;	import com.smartfoxserver.v2.requests.LogoutRequest;	import com.smartfoxserver.v2.entities.Room;	import com.smartfoxserver.v2.entities.User;		public class ServerProxy extends Proxy implements IProxy{		public static const NAME:String = "ServerProxy";				//public static const LOST_CONNECTION:String = "lostConnection";		public static const ROOM_JOINED:String = "roomJoined";		public static const ROOM_JOIN_ERROR:String = "roomJoinError";		public static const USER_ENTER_ROOM:String = "userEnterRoom";		public static const USER_EXIT_ROOM:String = "userExitRoom";		public static const MY_PC_UPDATED:String = "myPCUpdated";		public static const OTHER_PC_UPDATED:String = "otherPCUpdated";				public function ServerProxy(){			// constructor code			super( NAME, new Server());			sfs = new SmartFox(true);						trace("ServerProxy sez: API version is " + sfs.version);			sfs.addEventListener(SFSEvent.LOGIN, onLogin);			sfs.addEventListener(SFSEvent.LOGIN_ERROR, loginError);						sfs.addEventListener(SFSEvent.EXTENSION_RESPONSE, extensionResponse);			sfs.addEventListener(SFSEvent.ROOM_JOIN, roomJoin);			sfs.addEventListener(SFSEvent.ROOM_JOIN_ERROR, roomJoinError);			sfs.addEventListener(SFSEvent.USER_ENTER_ROOM, userEnterRoom);			sfs.addEventListener(SFSEvent.USER_EXIT_ROOM, userExitRoom);			sfs.addEventListener(SFSEvent.USER_VARIABLES_UPDATE, userVariablesUpdate);			sfs.addEventListener(SFSEvent.ROOM_VARIABLES_UPDATE, roomVariablesUpdate);		}		public function get server():Server {			return data as Server;		}		public function login(username:String, password:String, params:RequestData = null):void{			server.setUsername(username.toLowerCase());			server.setPassword(password);			//To do: Store the parameters to update. Is this cleaner if I switch to the other way of doing this? 			if(!sfs.isConnected) {				sfs.addEventListener(SFSEvent.CONNECTION, onConnectionLogin);				this.connect();			} else {								var sfsParams:SFSObject = null;								if(params != null){					sfsParams = new SFSObject;					var requestParams:Array = params.getRequestParams();					for each (var param:DataParam in requestParams) {						param.addToServerParam(sfsParams);					}				}				var request:LoginRequest = new LoginRequest(username, password, "", sfsParams);								sfs.send(request);			}		}		public function logout():void{			trace("ServerProxy sez: We are trying to log out");			if(sfs.isConnected){				trace("ServerProxy sez: We are connected.");				sfs.addEventListener(SFSEvent.LOGOUT, onLogout);				trace("ServerProxy sez: We have added our event listener.");				sfs.send(new LogoutRequest());				trace("ServerProxy sez: We have sent a logout request");			}		}		public function sendRequest(requestData:RequestData) :void{			var requestObject:SFSObject = new SFSObject();			var params:Array = requestData.getRequestParams();			for each (var param:DataParam in params) {				param.addToServerParam(requestObject);			}						this.sendSFSExtensionRequest(requestData.getRequestName(), requestObject);					}		public function getReceivedParamValue(param:DataParam):void{			var data:SFSObject = server.getReceivedParams() as SFSObject;			param.translateFromServerParam(data);		}		/**		 * This should return an array of all of the pcs in the current room. 		 */		public function getRoomPCs():Array{			var currentRoom:Room = sfs.lastJoinedRoom;			var userList:Array = currentRoom.userList;			var pcList:Array = new Array();			for each (var user:User in userList){				var userVars:Array = user.getVariables();				var pcParam:DataParamPlayerChar = new DataParamPlayerChar("pc");				pcParam.translateFromUserVariable(userVars);				var pc:PlayerChar = pcParam.getParamValue() as PlayerChar;				if(pc != null && pc.getRole()!=AnyChar.BANKER){					pc.setOnlineStatus(true); //If they aren't online but are in the room this is an issue!					pcList.push(pc);				} else {					trace("We had a null value come back from getParamValue");				}			}			return pcList;		}		private function sendSFSExtensionRequest(requestName:String, requestObject:SFSObject):void{			var request:ExtensionRequest = new ExtensionRequest(requestName, requestObject);			sfs.send(request);		}		private function onLogin(e:Event):void{			sendNotification(ApplicationFacade.LOGIN_SUCCESSFUL);		}		private function loginError(e:SFSEvent):void{			var message:String = e.params.errorMessage;			trace("ServerProxy sez: login error - "+message);						sendNotification(ApplicationFacade.DISPLAY_ERROR_MESSAGE, message);		}		private function onLogout(E:Event):void{			trace("ServerProxy sez: We're being partially successful.");			sendNotification(ApplicationFacade.LOGOUT_SUCCESSFUL);		}		private function onConnectionLogin(e:SFSEvent):void{			if (e.params.success){				sfs.addEventListener(SFSEvent.CONNECTION_LOST, onConnectionLost);				this.login(server.getUsername(), server.getPassword());			}			else			{				// Show message				trace("Unable to connect to " + sfs.currentIp + ":" + sfs.currentPort + "\nPlease check the client configuration");			}			sfs.removeEventListener(SFSEvent.CONNECTION, onConnectionLogin);		}		private function onConnectionLost(e:Event):void{			trace("We lost our connection. Bummer.");			sendNotification(ApplicationFacade.LOST_SERVER_CONNECTION);		}		private function roomJoin(e:SFSEvent):void{			var room:Room = e.params.room as Room;			trace ("ServerProxy sez: I just joined room " + room.name);			var roomProxy:ServerRoomProxy = facade.retrieveProxy(ServerRoomProxy.NAME) as ServerRoomProxy;			if(roomProxy == null){				roomProxy = new ServerRoomProxy(room);				facade.registerProxy(roomProxy);			} else {				roomProxy.updateRoom(room);			}						sendNotification(ROOM_JOINED, room.name);		}		private function roomJoinError(e:SFSEvent):void{			sendNotification( ROOM_JOIN_ERROR, e.params.errorMessage );		}		private function userEnterRoom(e:SFSEvent):void{			var room:Room = e.params.room as Room;			var user:User = e.params.user as User;						trace ("ServerProxy sez: User " + user.name + " just joined room " + room.name);			//Assuming I don't care about users, only pcs:			var pc:PlayerChar = this.retrievePCFromUser(user);						sendNotification( USER_ENTER_ROOM, pc );		}		private function userExitRoom(e:SFSEvent):void{			var room:Room = e.params.room as Room;			var user:User = e.params.user as User;			trace ("User " + user.name + " just left room " + room.name);			//Assuming I don't care about users, only pcs:			var pc:PlayerChar = this.retrievePCFromUser(user);						sendNotification( USER_EXIT_ROOM, pc );		}		private function userVariablesUpdate(e:SFSEvent):void {			trace("We have updated user Variables. ooooooooh");			var changedVars:Array = e.params.changedVars as Array;			var user:User = e.params.user as User;						if(changedVars.indexOf("pc") != -1){				var pc:PlayerChar = this.retrievePCFromUser(user);				if(user == sfs.mySelf){					trace("This is me: "+pc.getFirstName());										sendNotification( MY_PC_UPDATED,  pc);				} else {					trace("This is not me: "+pc.getFirstName());					sendNotification( OTHER_PC_UPDATED, pc);				}							}		}		private function roomVariablesUpdate(e:SFSEvent):void {			//Just update the room proxy room.			var room:Room = e.params.room as Room; 			var roomProxy:ServerRoomProxy = facade.retrieveProxy(ServerRoomProxy.NAME) as ServerRoomProxy;			if(roomProxy == null){				trace ("ServerProxy sez: We've got a problem with a null ServerRoomProxy, and that ain't right.");			} else {				roomProxy.updateRoom(room);			}		}		private function connect():void{			if (!sfs.isConnected) {				// If this is the first time we are attempting the connection,				// we have to load the external configuration file containing the connection details (ip, port, zone)				// We know if this is the first connection by checking the SmartFox.config property (not null if configuration is already loaded)				if (sfs.config == null) {					sfs.loadConfig("config/sfs-config.xml", true);				} else {					sfs.connect();				}			}		}		private function extensionResponse(e:SFSEvent):void{			server.setReceivedParams(e.params.params);			sendNotification( ApplicationFacade.RECEIVE_SERVER_REQUEST, e.params.cmd);		}				private function retrievePCFromUser(user:User):PlayerChar {			var userVars:Array = user.getVariables();			var pcParam:DataParamPlayerChar = new DataParamPlayerChar("pc");			pcParam.translateFromUserVariable(userVars);			var pc:PlayerChar = pcParam.getParamValue() as PlayerChar;			return pc;		}		private var sfs:SmartFox;	}	}
/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.controller {	import uk.ac.sussex.serverhandlers.FarmHandlers;	import uk.ac.sussex.model.*;	import uk.ac.sussex.model.valueObjects.*;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;	/**	 * @author em97	 */	public class ReceivedPotentialTasksCommand extends SimpleCommand {		override public function execute(note:INotification):void {			var incomingData:IncomingData = note.getBody() as IncomingData;			var tasks:Array = incomingData.getParamValue("PotentialTasks") as Array;			trace("ReceivedPotentialTasksCommand sez: We have received " + tasks.length + " potential tasks");			var taskLP:TaskListProxy = facade.retrieveProxy(TaskListProxy.NAME) as TaskListProxy;			if(taskLP == null){				taskLP = new TaskListProxy();				facade.registerProxy(taskLP);			}			//var gameAssetsLP:GameAssetListProxy = facade.retrieveProxy(GameAssetListProxy.NAME) as GameAssetListProxy;			//var hearthMembersLP:HearthMembersListProxy = facade.retrieveProxy(HearthMembersListProxy.NAME) as HearthMembersListProxy;			for each (var pt:PotentialTask in tasks){			/**	var listedAssets:Array = pt.getAssets();				var completeAssets:Array = new Array();				for each (var ga:GameAsset in listedAssets){					var newAsset:GameAsset = gameAssetsLP.getGameAsset(ga.getId());					completeAssets.push(newAsset);				}				pt.setAssets(completeAssets);				var listedActors:Array = pt.getActors();				var completeActors:Array = new Array();				for each (var actor:AnyChar in listedActors){					var newActor:AnyChar = hearthMembersLP.getMember(actor.getId());					completeActors.push(newActor);				}				pt.setActors(completeActors);**/				taskLP.addPotentialTask(pt);			}			//Ok, to give the tasklistproxy a chance to get them sorted, I'll now retrieve them from there. 						var taskFormProxy:FormProxy = facade.retrieveProxy(FarmHandlers.TASK_EDIT_FORM) as FormProxy;			var taskOptions:Array = new Array();			if(taskFormProxy != null){				for each (pt in tasks){					var option:FormFieldOption = new FormFieldOption(pt.getName(), pt.getType());					taskOptions.push(option);				}								var taskForm:Form = taskFormProxy.getForm();				taskForm.updatePossibleFieldValues(FarmHandlers.TASK_TYPE, taskOptions);			}					}	}}
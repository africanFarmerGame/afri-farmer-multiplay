package uk.ac.sussex.controller{	import uk.ac.sussex.model.valueObjects.GameAsset;	import uk.ac.sussex.model.GameAssetListProxy;	import uk.ac.sussex.model.valueObjects.MarketAsset;	import uk.ac.sussex.model.valueObjects.IncomingData;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;	import uk.ac.sussex.model.MarketAssetsListProxy;		public class MarketAssetsStoreCommand extends SimpleCommand {		override public function execute(note:INotification):void {			var incomingData:IncomingData = note.getBody() as IncomingData;			var assetsList:Array = incomingData.getParamValue("AssetDetails") as Array;			trace("MarketAssetsStoreCommand sez: I'm about to stack a load of marketAssets in the list.");			var assetsLP:MarketAssetsListProxy = facade.retrieveProxy(MarketAssetsListProxy.NAME) as MarketAssetsListProxy;			if(assetsLP == null){				throw new Error("The MarketAssetsListProxy was null.");			}			var gameAssetsLP:GameAssetListProxy = facade.retrieveProxy(GameAssetListProxy.NAME) as GameAssetListProxy;			if(gameAssetsLP == null){				throw new Error ("The GameassetListProxy was null.");			}			for each (var ma:MarketAsset in assetsList){				var marketAsset:GameAsset = ma.getAsset();				if(marketAsset == null){					throw new Error("There was a problem with the market asset.");				} else {					var asset:GameAsset = gameAssetsLP.getGameAsset(ma.getAsset().getId());					ma.setAsset(asset);					assetsLP.addAsset(ma);				}			}		}	}}
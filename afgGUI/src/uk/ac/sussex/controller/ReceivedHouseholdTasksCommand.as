package uk.ac.sussex.controller {	import uk.ac.sussex.model.*;	import uk.ac.sussex.model.valueObjects.*;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;	/**	 * @author em97	 */	public class ReceivedHouseholdTasksCommand extends SimpleCommand {		override public function execute(note:INotification):void {			trace("ReceivedHouseholdTasksCommand sez: I have been fired.");			var incomingData:IncomingData = note.getBody() as IncomingData;			var tasks:Array = incomingData.getParamValue("Tasks") as Array;			var gameAssetLP:GameAssetListProxy = facade.retrieveProxy(GameAssetListProxy.NAME) as GameAssetListProxy;			//Hm. The hearth member list might not be enough. Tricky. It'll do for now. 			var hearthMembersLP:HearthMembersListProxy = facade.retrieveProxy(HearthMembersListProxy.NAME) as HearthMembersListProxy;			for each (var task:Task in tasks){				var assetId:int = task.getAsset().getId();				var asset:GameAsset = gameAssetLP.getGameAsset(assetId);				task.setAsset(asset);				if(task.getActor()!=null){					var actorId:int = task.getActor().getId();					var actor:AnyChar = hearthMembersLP.getMember(actorId);					if(actor!=null){						task.getActor().setRelationship(AnyChar.IMMEDIATE_FAMILY);					} else {						task.getActor().setRelationship(AnyChar.NO_RELATION);					}				}			}			var taskListProxy:TaskListProxy = facade.retrieveProxy(TaskListProxy.NAME) as TaskListProxy;			if(taskListProxy == null){				taskListProxy = new TaskListProxy();				facade.registerProxy(taskListProxy);			}			taskListProxy.addHouseholdTasks(tasks);		}	}}
package uk.ac.sussex.view {	import uk.ac.sussex.model.GMHouseholdDataProxy;	import uk.ac.sussex.view.components.TasksGMOverviewDisplay;	import uk.ac.sussex.model.valueObjects.Hearth;	import uk.ac.sussex.model.HearthListProxy;	import org.puremvc.as3.multicore.interfaces.INotification;	import uk.ac.sussex.general.ApplicationFacade;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.interfaces.IMediator;	/**	 * @author em97	 */	public class TasksGMOverviewListMediator extends Mediator implements IMediator {		private var householdDataProxy:GMHouseholdDataProxy;		public static const NAME:String = "TasksGMOverviewListMediator";				public function TasksGMOverviewListMediator() {			super(NAME, null);		}		override public function listNotificationInterests():Array {			return [GMHouseholdDataProxy.HOUSEHOLD_DATA_UPDATED, 					HearthListProxy.HEARTH_ADDED];		}		override public function handleNotification (note:INotification):void {			switch (note.getName()){				case GMHouseholdDataProxy.HOUSEHOLD_DATA_UPDATED:					trace("TasksGMOverviewList sez: I have task counts to deal with.");					calculateAndDisplayTotals();					break;				case HearthListProxy.HEARTH_ADDED:					trace("TasksGMOverviewList sez: we now have hearths to deal with");					calculateAndDisplayTotals();			}		}		public function showList(showList:Boolean):void{			tasksOverview.clearSelection();			if(showList){				sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, tasksOverview);			} else {				sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, tasksOverview);			}		}		private function calculateAndDisplayTotals():void {			tasksOverview.clearTasks();			var hearthListProxy:HearthListProxy = facade.retrieveProxy(HearthListProxy.NAME) as HearthListProxy;			if(hearthListProxy==null){				trace("TasksGMOverviewListProxy sez: We have a problem with the hearthListProxy");			} else {				var hearths:Array = hearthListProxy.getHearths();				for each (var hearth:Hearth in hearths){					var pendingTasks:int = householdDataProxy.fetchHouseholdTaskCount(hearth.getId());					tasksOverview.addTask(hearth, pendingTasks);				}			}		}		/**public function getSelectedBillId():String{			return finesDisplay.getSelectedFineId();		}		public function listenForSelection(listen:Boolean):void{			if(listen){				finesDisplay.addEventListener(ScrollingList.ITEM_SELECTED, itemSelected);			} else {				finesDisplay.removeEventListener(ScrollingList.ITEM_SELECTED, itemSelected);			}		}		private function itemSelected(e:Event):void {			trace("FinesListMediator sez: I heard a bill item has been selected. ");			sendNotification(ApplicationFacade.SWITCH_SUBMENU_ITEM, BankHandlers.FINES_SUB_MENU_PAY);			listenForSelection(false);		}*/		protected function get tasksOverview():TasksGMOverviewDisplay {			return viewComponent as TasksGMOverviewDisplay;		}		override public function onRegister():void {			viewComponent = new TasksGMOverviewDisplay();			var submenu:SubMenuMediator = facade.retrieveMediator(SubMenuMediator.NAME) as SubMenuMediator;			tasksOverview.x = submenu.getSubmenuWidth();			tasksOverview.y = 10;			householdDataProxy = facade.retrieveProxy(GMHouseholdDataProxy.NAME) as GMHouseholdDataProxy;			sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, tasksOverview);		}		override public function onRemove():void {			sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, tasksOverview);		}	}}
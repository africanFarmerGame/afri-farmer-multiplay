/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.view {	//import uk.ac.sussex.model.valueObjects.GameAsset;	import uk.ac.sussex.serverhandlers.MarketHandlers;	import flash.events.Event;	import uk.ac.sussex.general.ApplicationFacade;	import org.puremvc.as3.multicore.interfaces.*;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import uk.ac.sussex.view.components.ManagerMarketAssetsList;	import uk.ac.sussex.model.MarketAssetsListProxy;	import uk.ac.sussex.model.valueObjects.MarketAsset;	//import uk.ac.sussex.view.components.ManagerMAListItem;	import uk.ac.sussex.view.components.ScrollingList;	public class MarketAssetsListMediator extends Mediator implements IMediator {		public static const NAME:String = "MarketAssetsListMediator";		private var marketAssetLP:MarketAssetsListProxy;				public function MarketAssetsListMediator(viewComponent : Object = null) {			super(NAME, viewComponent);		}		override public function listNotificationInterests():Array {			return [MarketAssetsListProxy.ASSET_ADDED, 					MarketAssetsListProxy.ASSET_UPDATED];		}		override public function handleNotification (note:INotification):void {			switch (note.getName()){				case MarketAssetsListProxy.ASSET_ADDED:					this.addAssets();				break;				case MarketAssetsListProxy.ASSET_UPDATED:					var updatedAsset:MarketAsset = note.getBody() as MarketAsset;					if(updatedAsset != null){						this.updateAsset(updatedAsset);					} else {						throw new Error("MarketAssetsListMediator sez: The asset that was updated was null. Not so good. ");					}				break;			}		}		public function showList(showList:Boolean):void{			marketAssetsList.clearSelection();			if(showList){				sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, marketAssetsList);			} else {				sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, marketAssetsList);			}		}		public function listenForSelection(listen:Boolean):void{			if(listen){				marketAssetsList.addEventListener(ScrollingList.ITEM_SELECTED, editAsset);			} else {				marketAssetsList.removeEventListener(ScrollingList.ITEM_SELECTED, editAsset);			}		}		public function getSelectedMAId():String{			return marketAssetsList.getSelectedMAId();		}		private function addAssets():void{			marketAssetsList.clearList();			if(marketAssetLP==null){				marketAssetLP = facade.retrieveProxy(MarketAssetsListProxy.NAME) as MarketAssetsListProxy;			}			var marketAssets:Array = marketAssetLP.fetchAssets();			for each (var marketAsset:MarketAsset in marketAssets){				marketAssetsList.addAssetItem(marketAsset);			}		}		private function updateAsset(asset:MarketAsset):void {			//More tricky than just adding. 			marketAssetsList.updateAssetItem(asset);		}		private function editAsset(e:Event):void{			sendNotification(ApplicationFacade.SWITCH_SUBMENU_ITEM, MarketHandlers.GM_SUB_MENU_EDIT);			listenForSelection(false);		}		protected function get marketAssetsList():ManagerMarketAssetsList {			return viewComponent as ManagerMarketAssetsList;		}		override public function onRegister():void {			viewComponent = new ManagerMarketAssetsList();			var submenu:SubMenuMediator = facade.retrieveMediator(SubMenuMediator.NAME) as SubMenuMediator;						marketAssetsList.x = submenu.getSubmenuWidth();			marketAssetsList.y = 10;			sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, marketAssetsList);		}		override public function onRemove():void {			marketAssetsList.removeEventListener(ScrollingList.ITEM_SELECTED, editAsset);			sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, marketAssetsList);		}	}}
package uk.ac.sussex.view {	import uk.ac.sussex.model.valueObjects.Fine;	import uk.ac.sussex.model.valueObjects.Hearth;	import uk.ac.sussex.model.HearthListProxy;	import uk.ac.sussex.view.components.FinesGMOverviewDisplay;	import uk.ac.sussex.model.FinesProxy;	import org.puremvc.as3.multicore.interfaces.INotification;	import uk.ac.sussex.general.ApplicationFacade;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.interfaces.IMediator;	/**	 * @author em97	 */	public class FinesGMOverviewListMediator extends Mediator implements IMediator {		private var finesListProxy:FinesProxy;		public static const NAME:String = "FinesGMOverviewListMediator";				public function FinesGMOverviewListMediator() {			super(NAME, null);		}		override public function listNotificationInterests():Array {			return [FinesProxy.FINES_ADDED, 					HearthListProxy.HEARTH_ADDED];		}		override public function handleNotification (note:INotification):void {			switch (note.getName()){				case FinesProxy.FINES_ADDED:					trace("FinesGMOverviewList sez: I have fines to deal with.");					calculateAndDisplayTotals();					break;				case HearthListProxy.HEARTH_ADDED:					trace("FinesGMOverviewList sez: we now have hearths to deal with");					calculateAndDisplayTotals();			}		}		public function showList(showList:Boolean):void{			finesOverview.clearSelection();			if(showList){				sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, finesOverview);			} else {				sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, finesOverview);			}		}		private function calculateAndDisplayTotals():void {			finesOverview.clearFines();			var hearthListProxy:HearthListProxy = facade.retrieveProxy(HearthListProxy.NAME) as HearthListProxy;			if(hearthListProxy==null){				trace("FinesGMOverviewListProxy sez: We have a problem with the hearthListProxy");			} else {				var hearths:Array = hearthListProxy.getHearths();				for each (var hearth:Hearth in hearths){					var totalPaid:int = 0;					var totalUnpaid:int = 0;					var totalFines:int = 0;					var hearthFines:Array = finesListProxy.getFinesByPayee(hearth.getId());					trace("FinesGMOverviewListMediator sez: I have " + hearthFines.length + " fines for hearth " + hearth.getHearthName());					if(hearthFines!=null){						totalFines = hearthFines.length;						for each (var fine:Fine in hearthFines){							if(fine.getPaid()){								totalPaid ++;							} else {								totalUnpaid ++;							}						}					}					finesOverview.addFine(hearth,totalPaid, totalUnpaid, totalFines);				}			}		}		/**public function getSelectedBillId():String{			return finesDisplay.getSelectedFineId();		}		public function listenForSelection(listen:Boolean):void{			if(listen){				finesDisplay.addEventListener(ScrollingList.ITEM_SELECTED, itemSelected);			} else {				finesDisplay.removeEventListener(ScrollingList.ITEM_SELECTED, itemSelected);			}		}		private function itemSelected(e:Event):void {			trace("FinesListMediator sez: I heard a bill item has been selected. ");			sendNotification(ApplicationFacade.SWITCH_SUBMENU_ITEM, BankHandlers.FINES_SUB_MENU_PAY);			listenForSelection(false);		}*/		protected function get finesOverview():FinesGMOverviewDisplay {			return viewComponent as FinesGMOverviewDisplay;		}		override public function onRegister():void {			viewComponent = new FinesGMOverviewDisplay();			var submenu:SubMenuMediator = facade.retrieveMediator(SubMenuMediator.NAME) as SubMenuMediator;			finesOverview.x = submenu.getSubmenuWidth();			finesOverview.y = 10;			finesListProxy = facade.retrieveProxy(FinesProxy.NAME) as FinesProxy;			sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, finesOverview);		}		override public function onRemove():void {			sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, finesOverview);		}	}}
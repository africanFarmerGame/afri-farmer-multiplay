/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.view.components {	import flash.display.MovieClip;	import flash.text.TextFormat;	import flash.events.*;	import uk.ac.sussex.model.valueObjects.FormFieldOption;	import uk.ac.sussex.model.valueObjects.FormField;	/**	 * @author em97	 */	public class RadioFormFieldMC extends GenericFormFieldMC {		private var buttonGroup:Array;		private var radioButtons:MovieClip;		public function RadioFormFieldMC(formField : FormField) {			super(formField);						buttonGroup = new Array();			var buttonValues:Array = formField.getPossibleValues();			radioButtons = new MovieClip();						var nextX:Number = 0;			for each (var option:FormFieldOption in buttonValues){				var radio:GameRadioButton = new GameRadioButton();				buttonGroup.push(radio);				radio.labelText = option.getDisplayName();				radio.value = option.getOutputValue();								radio.addEventListener(GameRadioButton.VALUE_CHANGED, valueChanged);				setUpTextLabels(radio);				radio.x = nextX;				radioButtons.addChild(radio);				nextX = nextX + radio.width + GAP_SIZE;			}			radioButtons.x = label.x + label.width + GAP_SIZE;			this.addChild(radioButtons);		}		override public function setFieldValue() : void {			var fieldValue:String = field.getFieldValue();			if( fieldValue != null){				for each (var button:GameRadioButton in buttonGroup){					button.selected = (button.value == fieldValue);				}			}		}		override public function setLabelWidth(labelWidth : Number):void {			super.setLabelWidth(labelWidth);			radioButtons.x = label.x + label.width + GAP_SIZE;		}		override public function updateEnabled():void {			super.updateEnabled();			var enabled:Boolean = field.getEnabled();			for each(var radio:GameRadioButton in buttonGroup){				radio.enabled = enabled;			}		}		private function valueChanged(e:Event):void{			var radio:GameRadioButton = e.target as GameRadioButton;			trace("RadioFomFieldMC sez: " + radio.value + " just got selected.");			field.setFieldValue(radio.value);			for each (var button:GameRadioButton in buttonGroup){				if(button!=radio){					button.selected = false;				}			}		}				private function setUpTextLabels(btn:GameRadioButton):void{			var tFormat:TextFormat = new TextFormat();			tFormat.font = "Calibri";			tFormat.size = 15;			tFormat.bold = false;			btn.setLabelFormat(tFormat);			btn.height = 26;		}			}}
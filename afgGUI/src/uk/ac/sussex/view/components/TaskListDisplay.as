/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.view.components {	import flash.text.TextFormatAlign;	import flash.text.TextFormat;	import flash.text.TextField;	import flash.display.Shape;	import flash.events.*;	import flash.display.MovieClip;	import uk.ac.sussex.model.valueObjects.Task;	/**	 * @author em97	 */	public class TaskListDisplay extends MovieClip {		private var scrollingList:ScrollingList;		private var cancelButton:CancelBtn1;		private var confirmButton:ConfirmBtn;		private var deleting:Boolean = false;				private static const GAP_SIZE:Number = 10;				public static const CONFIRM_TASK_SELECTION:String = "ConfirmTaskSelection";		public static const CANCEL_TASK_SELECTION:String = "CancelTaskSelection";				public function TaskListDisplay() {			setup();		}		public function displayTasks(taskArray:Array):void {			scrollingList.clearList();			var currentSeason:int = -1;			for each (var task:Task in taskArray) {				if(!task.getDeleted()){					var taskItem:TaskListItem = new TaskListItem();					taskItem.setTask(task);										if(currentSeason == -1){						currentSeason = task.getSeasonId();					}					if(currentSeason!= task.getSeasonId()){						var separatorItem:SeparatorListItem =  new SeparatorListItem();						separatorItem.width = taskItem.width;						separatorItem.height = taskItem.height;						scrollingList.addItem(separatorItem);						currentSeason = task.getSeasonId();					}					scrollingList.addItem(taskItem);				}			}		}		public function clearTasks():void {			scrollingList.clearCurrentSelection();			scrollingList.clearList();		}		public function getSelectedTaskId():String{			var selectedId:String = scrollingList.getCurrentValue();			return selectedId;		}		public function setDeleting(deleting:Boolean):void {			this.deleting = deleting;			this.showHideSaveConfirmCancelButtons();		}		public function clearSelection():void {			scrollingList.clearCurrentSelection();		}		public function destroy():void {			scrollingList.destroy();		}		private function setup():void {			setupTitleBar();						scrollingList = new ScrollingList(620, 264);			scrollingList.x = 0;			scrollingList.y = 25; 			scrollingList.showBackgroundFilter(false);			scrollingList.setBorderColour(0x09063A);			this.addChild(scrollingList);						var scale:Number = 0.25;						cancelButton = new CancelBtn1();			cancelButton.scaleX = cancelButton.scaleY = scale;			cancelButton.x = -cancelButton.width - GAP_SIZE;			cancelButton.y = scrollingList.y + scrollingList.height - cancelButton.height;			this.addChild(cancelButton);						confirmButton = new ConfirmBtn();			confirmButton.scaleX = confirmButton.scaleY = scale;			confirmButton.x = cancelButton.x;			confirmButton.y = cancelButton.y - GAP_SIZE - confirmButton.height;			this.addChild(confirmButton);		}		private function showHideSaveConfirmCancelButtons():void {			cancelButton.visible = false;			confirmButton.visible = false;						if(deleting){				confirmButton.visible = true;				confirmButton.addEventListener(MouseEvent.CLICK, confirmSelection);				cancelButton.addEventListener(MouseEvent.CLICK, cancelSelection);				cancelButton.visible = true;			} else {				confirmButton.visible = false;				confirmButton.removeEventListener(MouseEvent.CLICK, confirmSelection);				cancelButton.visible = false;				cancelButton.removeEventListener(MouseEvent.CLICK, cancelSelection);			}		}		private function confirmSelection(e:MouseEvent):void{			if(deleting){				this.dispatchEvent(new Event(CONFIRM_TASK_SELECTION));			}		}		private function cancelSelection(e:MouseEvent):void {			dispatchEvent(new Event(CANCEL_TASK_SELECTION));		}		private function setupTitleBar():void {			var taskListItem:TaskListItem = new TaskListItem();						var titleBar:Shape = new Shape();			titleBar.graphics.lineStyle(1,0x000000);			titleBar.graphics.beginFill(0xF49160); 			titleBar.graphics.drawRect(0,0,taskListItem.width + 20,25);			titleBar.graphics.endFill();				this.addChild(titleBar);			var tFormat:TextFormat = new TextFormat();			tFormat.font = "Calibri";			tFormat.size = 17;			tFormat.bold = false;			tFormat.align = TextFormatAlign.CENTER;							var headers:Array = TaskListItem.getColumnHeaders();						for each (var header:Array in headers){				var text:TextField = new TextField();				text.defaultTextFormat = tFormat;				text.textColor = 0x000000;				text.background = false;				text.border = false;				text.borderColor = 0x000000;				text.selectable = false;				text.x = header.pop();				text.width = header.pop();				text.text = header.pop();				text.height = 25;				text.y = 0;				this.addChild(text);			}		}	}}
package uk.ac.sussex.view.components {	import flash.text.*;	import uk.ac.sussex.model.valueObjects.GameAsset;		/**	 * @author em97	 */	public class ManagerMAListItem extends ListItem {		private var marketAsset:IconTextBox;		private var amount:GameTextField;		private var buyPrice:GameTextField;		private var sellPrice:GameTextField;					private static const GAP_SIZE:Number = 2;		private static const ITEM_Y_POS:uint = 0;		private static const ITEM_HEIGHT:uint = 25;		private static const ASSET_WIDTH:uint = 180;		private static const STOCK_LEVEL_WIDTH:uint = 130;		private static const PRICE_WIDTH:uint = 130;				public function ManagerMAListItem() {						marketAsset = new IconTextBox();			marketAsset.setBoxIcon(new AssetIcon());			marketAsset.height = ITEM_HEIGHT;			marketAsset.width = ASSET_WIDTH;			marketAsset.x = GAP_SIZE;			marketAsset.y = ITEM_Y_POS;			this.addChild(marketAsset);						amount = new GameTextField();			amount.y = ITEM_Y_POS;			amount.x = marketAsset.x + marketAsset.width + GAP_SIZE;			amount.height = ITEM_HEIGHT;			amount.width = STOCK_LEVEL_WIDTH;			this.addChild(amount);						buyPrice = new GameTextField();			buyPrice.y = ITEM_Y_POS;			buyPrice.x = amount.x + amount.width + GAP_SIZE;			buyPrice.height = ITEM_HEIGHT;			buyPrice.width = PRICE_WIDTH;			this.addChild(buyPrice);						sellPrice = new GameTextField();			sellPrice.height = ITEM_HEIGHT;			sellPrice.width = PRICE_WIDTH;			sellPrice.x = buyPrice.x + buyPrice.width + GAP_SIZE;			sellPrice.y = ITEM_Y_POS;			this.addChild(sellPrice);						this.mouseChildren = false;							}		public function setAsset(asset:GameAsset):void{			var assetIcon:AssetIcon = new AssetIcon();			marketAsset.setText(asset.getName());			assetIcon.setType(asset.getType(), asset.getSubtype());			marketAsset.setBoxIcon(assetIcon);		}		public function setAmount(newAmount:String, measurement:String):void {			if(newAmount != 1){				measurement = measurement + "s";			}			amount.text = newAmount + " " + measurement;		}		public function setBuyPrice(newPrice:String):void {			this.buyPrice.text = newPrice;		}		public function setSellPrice(newPrice:String):void {			this.sellPrice.text = newPrice;		}		public static function getColumnHeaders():Array {			var headers:Array = new Array();						headers.push(new Array("Asset", ASSET_WIDTH, 0));			headers.push(new Array("Stock Level", STOCK_LEVEL_WIDTH, ASSET_WIDTH + GAP_SIZE));			headers.push(new Array("Market Buys For", PRICE_WIDTH, ASSET_WIDTH + 2*GAP_SIZE + STOCK_LEVEL_WIDTH));			headers.push(new Array("Market Sells At", PRICE_WIDTH, ASSET_WIDTH + STOCK_LEVEL_WIDTH + PRICE_WIDTH + 3*GAP_SIZE));						return headers;		}	}}	
/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.view.components {	import flash.display.DisplayObject;	import fl.events.ScrollEvent;	import flash.filters.DropShadowFilter;	import flash.display.MovieClip;		/**	 * @author em97	 */	public class ScrollingContainer extends MovieClip {		private var scrollBar:ScrollBar;		private var dirContainer:MovieClip;		private var background:MovieClip;		protected var dirMask:MovieClip;		protected var dirHighlight:DropShadowFilter;		protected var onScreenHeight:Number;		protected var onScreenWidth:Number;		//protected var listWidth:Number; // this is the width without the scrollbar.		protected var maskWidth:Number;		protected var maskHeight:Number; 				private var backgroundColour:uint = 0xffffff;		private var showBorder:Boolean = true;		private var scrollDirection:int = 0;		private var showBackground:Boolean = true;		private var showFilter:Boolean = true;				private const THUMB_COLOUR:uint = 0xA2BE28;		private const TRACK_COLOUR:uint = 0x060438;		private const BORDER_WIDTH:Number = 1;				public static const VERTICAL:int = 0;		public static const HORIZONTAL:int = 1;						public function ScrollingContainer(onScreenWidth:Number, onScreenHeight:Number, direction:int = VERTICAL, showBorder:Boolean = true) {			this.onScreenHeight = onScreenHeight;			this.onScreenWidth = onScreenWidth;			this.showBorder = showBorder;			scrollBar = new ScrollBar(THUMB_COLOUR, TRACK_COLOUR);			scrollDirection = direction;						if(direction == VERTICAL){				scrollBar.setScrollDirection(ScrollBar.VERTICAL);				scrollBar.width = 12;				if(showBorder){					this.maskWidth = onScreenWidth - scrollBar.width - BORDER_WIDTH;					this.maskHeight = onScreenHeight - BORDER_WIDTH;					scrollBar.y = 0; 					scrollBar.height = onScreenHeight-BORDER_WIDTH; 									} else {					this.maskWidth = onScreenWidth - scrollBar.width;					this.maskHeight = onScreenHeight+1;					scrollBar.y = 0; 					scrollBar.height = onScreenHeight; 				}								scrollBar.x = onScreenWidth -scrollBar.width;							} else if (direction == HORIZONTAL){				scrollBar.setScrollDirection(ScrollBar.HORIZONTAL);				scrollBar.height = 12;				if(showBorder){					this.maskWidth = onScreenWidth - BORDER_WIDTH;					this.maskHeight = onScreenHeight - scrollBar.height - BORDER_WIDTH;				} else {					this.maskWidth = onScreenWidth;					this.maskHeight = onScreenHeight - scrollBar.height;				}				scrollBar.x = 0;				scrollBar.y = onScreenHeight - scrollBar.height;				scrollBar.width = onScreenWidth;			}			this.setupFilter();			dirContainer = new MovieClip();			background = new MovieClip();			dirContainer.addChild(background);			if(showBorder){				dirContainer.x = BORDER_WIDTH;				dirContainer.y = BORDER_WIDTH;			} else {				dirContainer.x = 0;				dirContainer.y = 0;				}						dirMask = new MovieClip();			dirMask.graphics.beginFill(0x414042);			if(direction == VERTICAL){				dirMask.graphics.drawRect(0,0,this.maskWidth, this.maskHeight-1);			} else {				dirMask.graphics.drawRect(0,0,this.maskWidth-1, this.maskHeight);			}						dirMask.x = dirContainer.x;			dirMask.y = dirContainer.y;			dirContainer.mask = dirMask;								scrollBar.enabled = true;			scrollBar.addEventListener(ScrollEvent.SCROLL, scrollDir);						this.redrawContainer(this.maskWidth, this.maskHeight);						addChild(dirContainer);			addChild(dirMask);			addChild(scrollBar);		}		public function setBackgroundColour(newColour:uint):void {			this.backgroundColour = newColour;			this.redrawContainer(this.maskWidth, dirContainer.height);		}		public function resetToTop():void {			scrollBar.scrollPosition = 0;		}		public function resetToBottom():void {			scrollBar.scrollPosition = dirContainer.height;		}		public function setBorderColour(newColour:uint):void {			if(this.showBorder){				this.graphics.lineStyle(BORDER_WIDTH, newColour);				this.graphics.drawRect(0, 0, this.onScreenWidth - BORDER_WIDTH, this.onScreenHeight - BORDER_WIDTH);			}		}		public function setFilterColour(newColour:uint):void {			this.dirHighlight.color = newColour;		}		public function showBackgroundFilter(show:Boolean):void {			showFilter = show;			if(showFilter){				background.filters = new Array(dirHighlight);			} else {				background.filters = new Array();			}		}		public function addItemToContainer(item:DisplayObject):void {			background.addChild(item);			this.redrawContainer(background.width, background.height);		}		public function refreshContainer():void {			//Need to potentially reset the size of the background.			var maxChildren:int = background.numChildren - 1;				 			if(scrollDirection==VERTICAL){				var maxHeight:Number = 0;				for (var i:int = maxChildren; i>=0; i--){					var currentChild:DisplayObject = background.getChildAt(i);					var bottomCorner:Number = currentChild.y + currentChild.height;					maxHeight = (bottomCorner>maxHeight?bottomCorner:maxHeight);				}							this.redrawContainer(background.width, maxHeight);			} else if (scrollDirection==HORIZONTAL){				var maxWidth:Number = 0;				for(var childNum:int = maxChildren;i>=0; i--){					var child:DisplayObject = background.getChildAt(childNum);					var rightCorner:Number = child.x + child.width;					maxWidth = (rightCorner>maxWidth?rightCorner:maxWidth);				}				this.redrawContainer(maxWidth, background.height);			}		}		public function hideBackground(hideBackground:Boolean):void {			showBackground = !hideBackground;			this.redrawContainer(background.width, background.height);		}		protected function clearContainer():void {			var maxChildren:int = background.numChildren - 1;			for (var i:int = maxChildren; i>=0; i--){				background.removeChildAt(i);				}		}		override public function get height():Number {			return this.onScreenHeight;		}		private function setupFilter():void {			this.dirHighlight = new DropShadowFilter();			this.dirHighlight.distance = 1;			this.dirHighlight.angle = 45;			this.dirHighlight.color = 0x558ed5;			this.dirHighlight.alpha = 0.8;			this.dirHighlight.blurX = 5;			this.dirHighlight.blurY = 5;			this.dirHighlight.strength = 2;			this.dirHighlight.quality = 15;			this.dirHighlight.inner = true;			this.dirHighlight.knockout = false;			this.dirHighlight.hideObject = false; 		}		private function scrollDir(event:ScrollEvent):void {			if(scrollDirection == VERTICAL){				dirContainer.y = -event.position + dirMask.y;			} else {				dirContainer.x = -event.position + dirMask.x;			}		}		protected function redrawContainer(newWidth:Number, newHeight:Number):void{			if(background.parent != null){				background.parent.removeChild(background);			}			if(scrollDirection == VERTICAL){				newHeight = (newHeight<=this.onScreenHeight?this.onScreenHeight:newHeight);				if(showBorder){					newHeight = newHeight-BORDER_WIDTH;				} 			} else {				newWidth = (newWidth<this.onScreenWidth?this.onScreenWidth:newWidth);				if(showBorder){					newWidth = newWidth-BORDER_WIDTH;				}			}			background.graphics.clear();			background.graphics.beginFill(this.backgroundColour, (showBackground?1:0));			background.graphics.drawRect(0, 0, newWidth, newHeight);			background.graphics.endFill();			if(showBackground && showFilter){							background.filters = new Array(dirHighlight);			} else {				background.filters = [];			}			dirContainer.addChild(background); //Not sure why I need to, but it seems to get lost?						//Need to set the scroll bar properties here too. 			if(scrollDirection == VERTICAL){				//scrollBar.setScrollProperties(this.onScreenHeight, dirContainer.height-this.onScreenHeight);				scrollBar.setScrollProperties(this.onScreenHeight, dirContainer.height);			} else {				//scrollBar.setScrollProperties(this.onScreenWidth, (dirContainer.width - this.onScreenWidth));				scrollBar.setScrollProperties(this.onScreenWidth, dirContainer.width);						}		}			}}
package uk.ac.sussex.view.components {		import flash.events.*;		public class ScrollingList extends ScrollingContainer {		private var currentItem:ListItem;				protected var nextYPos:Number;		protected var nextXPos:Number;		protected var listItemsSelectable:Boolean = true;		protected var allListItems:Array;		protected var initialXPos:Number;		protected var initialYPos:Number;				public static const ITEM_SELECTED:String = "ListItemSelected";		public static const SELECTION_CLEARED:String = "ListSelectionCleared";				protected static const INITIAL_Y_POS:uint = 15;		protected static const ITEM_X_OFFSET:uint = 3;		protected static const Y_BUFFER:uint = 5;		/***		 * Sets up a scrolling list item, with the right width, height and number of entries. 		 */		public function ScrollingList(totalWidth:Number, maskHeight:Number) {			super(totalWidth, maskHeight);			//Reset to add items at the top of the list			this.nextYPos = INITIAL_Y_POS;			this.nextXPos = ITEM_X_OFFSET;			this.initialYPos = INITIAL_Y_POS;			this.initialXPos = ITEM_X_OFFSET;			this.allListItems = new Array();		}		public function getCurrentValue():String {			if (this.currentItem != null) {				return this.currentItem.getItemID();			}			return null;		}		public function clearCurrentSelection():void {			if(this.currentItem != null){				this.currentItem.filters = [];			}			this.currentItem = null;		}		public function addItem(newItem:ListItem):void {			this.allListItems.push(newItem);			this.addListItemToContainer(newItem, this.allListItems.length);		}		public function clearList():void {			this.resetToTop();			this.clearCurrentSelection();			this.clearContainer();			this.nextYPos = this.initialYPos;			this.nextXPos = this.initialXPos;			this.allListItems = new Array();			this.redrawContainer(this.maskWidth, this.onScreenHeight); //This just redraws it back to original size. 					}		public function removeItem(listItemId:String):void {			this.resetToTop();			this.clearContainer();			this.nextYPos = this.initialYPos;			this.nextXPos = this.initialXPos;			this.currentItem = null;			var tempArray:Array = new Array();			for each (var listItem:ListItem in this.allListItems){				if(listItem.getItemID()!=listItemId){					tempArray.push(listItem);					this.addListItemToContainer(listItem, tempArray.length);				} 			}			this.allListItems = tempArray;		}		public function setListItemsSelectable(listItemsSelectable:Boolean):void {			this.listItemsSelectable = listItemsSelectable;			var listItem:ListItem;			if(listItemsSelectable){				//Need to change all existing list items to button mode and listen for them being clicked. 				for each (listItem in this.allListItems){					listItem.buttonMode = true;					listItem.addEventListener(ListItem.LIST_ITEM_CLICKED, itemSelect);				}			} else {				for each (listItem in this.allListItems){					listItem.buttonMode = false;					listItem.removeEventListener(ListItem.LIST_ITEM_CLICKED, itemSelect);				}			}		}		public function getItemWithID(id:String):ListItem{			for each (var listItem:ListItem in this.allListItems){				if(listItem.getItemID() == id){					return listItem;				}			}		}		public function setCurrentSelection(item:ListItem):void {			var itemIsNotCurrent:Boolean = true;			if(this.currentItem!=null && itemIsNotCurrent){				this.currentItem.filters = new Array();				itemIsNotCurrent = (currentItem.getItemID()!=item.getItemID());			}			if(itemIsNotCurrent){				selectItem(item);			}		}		public function destroy():void {			for each (var listItem:ListItem in allListItems){				listItem.destroy();			}		}		protected function calculateNextItemPos(newItem:ListItem, itemPos:int):void{			this.nextXPos = ITEM_X_OFFSET;			this.nextYPos += newItem.height + Y_BUFFER;		}		override protected function clearContainer():void {			for each (var listItem:ListItem in this.allListItems){				listItem.removeEventListener(ListItem.LIST_ITEM_CLICKED, itemSelect);			}			super.clearContainer();		}		private function addListItemToContainer(newItem:ListItem, itemPos:int):void {			newItem.x = this.nextXPos;			newItem.y = this.nextYPos;			newItem.buttonMode = this.listItemsSelectable && newItem.enabled;			if(this.listItemsSelectable){				newItem.addEventListener(ListItem.LIST_ITEM_CLICKED, itemSelect);			}			this.addItemToContainer(newItem);			this.redrawContainer(this.maskWidth, this.nextYPos + newItem.height + INITIAL_Y_POS);			this.calculateNextItemPos(newItem, itemPos);		}		private function itemSelect(e:Event):void {			//Need to know if it's a pre-selected item or not. 			if(this.currentItem != null){				//Clear current highlight				this.currentItem.filters = new Array();				if( e.target != this.currentItem ){						selectItem(e.target as ListItem);				} else {					this.currentItem = null; 					this.dispatchEvent(new Event(SELECTION_CLEARED, true));				}			} else {				selectItem(e.target as ListItem);			}					}		private function selectItem(item:ListItem):void {			this.currentItem = item;			this.currentItem.filters = new Array(dirHighlight);			this.dispatchEvent(new Event(ITEM_SELECTED, true));		}	}	}
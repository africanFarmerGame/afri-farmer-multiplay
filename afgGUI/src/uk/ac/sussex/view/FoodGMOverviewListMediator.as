package uk.ac.sussex.view {	import uk.ac.sussex.model.valueObjects.GMHouseholdData;	import uk.ac.sussex.model.GMHouseholdDataProxy;	import uk.ac.sussex.view.components.FoodGMOverviewDisplay;	import uk.ac.sussex.model.valueObjects.Hearth;	import uk.ac.sussex.model.HearthListProxy;	import org.puremvc.as3.multicore.interfaces.INotification;	import uk.ac.sussex.general.ApplicationFacade;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.interfaces.IMediator;	/**	 * @author em97	 */	public class FoodGMOverviewListMediator extends Mediator implements IMediator {		private var householdDataProxy:GMHouseholdDataProxy;		public static const NAME:String = "FoodsGMOverviewListMediator";				public function FoodGMOverviewListMediator() {			super(NAME, null);		}		override public function listNotificationInterests():Array {			return [GMHouseholdDataProxy.HOUSEHOLD_DATA_UPDATED, 					HearthListProxy.HEARTH_ADDED];		}		override public function handleNotification (note:INotification):void {			switch (note.getName()){				case GMHouseholdDataProxy.HOUSEHOLD_DATA_UPDATED:					trace("FoodsGMOverviewList sez: I have task counts to deal with.");					calculateAndDisplayTotals();					break;				case HearthListProxy.HEARTH_ADDED:					trace("FoodsGMOverviewList sez: we now have hearths to deal with");					calculateAndDisplayTotals();			}		}		public function showList(showList:Boolean):void{			foodsOverview.clearSelection();			if(showList){				sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, foodsOverview);			} else {				sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, foodsOverview);			}		}		private function calculateAndDisplayTotals():void {			foodsOverview.clearList();			var hearthListProxy:HearthListProxy = facade.retrieveProxy(HearthListProxy.NAME) as HearthListProxy;			if(hearthListProxy==null){				trace("FoodsGMOverviewListProxy sez: We have a problem with the hearthListProxy");			} else {				var hearths:Array = hearthListProxy.getHearths();				for each (var hearth:Hearth in hearths){					var householdData:GMHouseholdData = householdDataProxy.fetchHouseholdData(hearth.getId());					if(householdData!=null){						foodsOverview.addHearthDetail(hearth, householdData);					}				}			}		}		protected function get foodsOverview():FoodGMOverviewDisplay {			return viewComponent as FoodGMOverviewDisplay;		}		override public function onRegister():void {			viewComponent = new FoodGMOverviewDisplay();			var submenu:SubMenuMediator = facade.retrieveMediator(SubMenuMediator.NAME) as SubMenuMediator;			foodsOverview.x = submenu.getSubmenuWidth();			foodsOverview.y = 10;			householdDataProxy = facade.retrieveProxy(GMHouseholdDataProxy.NAME) as GMHouseholdDataProxy;			sendNotification(ViewAreaMediator.ADD_VIEW_COMPONENT, foodsOverview);		}		override public function onRemove():void {			sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, foodsOverview);		}	}}
/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.view {	import uk.ac.sussex.model.valueObjects.Game;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import org.puremvc.as3.multicore.interfaces.*;		import uk.ac.sussex.general.ApplicationFacade;	import uk.ac.sussex.view.components.JoinExistingGame;	import uk.ac.sussex.states.JoinGameGameState;	import uk.ac.sussex.model.valueObjects.IncomingData;	import uk.ac.sussex.view.components.GameButton;		import flash.events.Event;		public class JoinExistingGameMediator extends Mediator implements IMediator  {		public static const NAME:String = "JoinExistingGameMediator";				public function JoinExistingGameMediator( viewComponent:Object) {			// constructor code			super(NAME, viewComponent);		}		override public function listNotificationInterests():Array {			return [					JoinGameGameState.RECEIVED_GAME_LIST					];		}				override public function handleNotification (note:INotification):void {			switch ( note.getName() ) {				case JoinGameGameState.RECEIVED_GAME_LIST:					trace("Now we have something to display.");										var incomingData:IncomingData = note.getBody() as IncomingData;					if (joinExistingGame == null) {						setupViewComponent();					}					var games:Array = incomingData.getParamValue(JoinGameGameState.GAME_LIST) as Array;					if(games != null) {						for each (var game:Game in games) {							joinExistingGame.addGameItem(game);						}					} 			}		}		private function buttonClicked(e:Event) :void{			trace("this will attempt to join a game: "+ joinExistingGame.getCurrentValue());			sendNotification(JoinGameGameState.GAME_SELECTED, joinExistingGame.getCurrentValue());		}		private function setupViewComponent() :void		{			viewComponent = new JoinExistingGame();			joinExistingGame.x = 250;			joinExistingGame.y = 100;			joinExistingGame.addEventListener(GameButton.BUTTON_CLICK, buttonClicked);			sendNotification(ApplicationFacade.ADD_TO_SCREEN, joinExistingGame);		}		//Cast the viewComponent to the correct type.		protected function get joinExistingGame():JoinExistingGame {			return viewComponent as JoinExistingGame;		}		override public function onRegister():void		{			if(joinExistingGame == null) {				setupViewComponent();			}		}		override public function onRemove():void		{			sendNotification(ApplicationFacade.REMOVE_FROM_SCREEN, joinExistingGame);		}	}	}
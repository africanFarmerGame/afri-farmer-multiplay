package uk.ac.sussex.states {		public class StateHandler {		public static var ADDING_NUMBERS:String = 'ADDING_NUMBERS_STATE';		public static var LOGIN:String = 'LOGIN_STATE';				private var statesRegistered:Boolean;		private var gameStates:Array;		private var currentState:IGameState;		private var previousState:IGameState;				public function StateHandler() {			// constructor code			this.clearRegisteredStates();		}		public function register(gameState:IGameState):void {			//Check if it already exists			var stateName:String = gameState.getName();			if(this.checkGameStateExists(stateName)){			 	//I need to raise an error.  			 	trace("StateHandler sez: The game state you're registering (" + stateName + ") already exists.");			} else {				//If not, add it to the list of states.				this.gameStates[stateName] = gameState;			}		}		public function getGameState(stateName:String):IGameState{			for each (var item:IGameState in gameStates){				trace("StateHandler sez: Looking for " + stateName + ", got Gamestate " + item.getName());				if(item.getName() == stateName){				  trace("StateHandler sez: I am returning " + item.getName());					return item;				}			}			return null;		}		public function changeGameState(newState:String):void{			trace("StateHandler sez: we're trying to enter state " + newState);			var nextState:IGameState = this.getGameState(newState);			if(nextState != null){				if(this.currentState != null){					this.currentState.cleanUpState();					this.previousState = this.currentState;				}				this.currentState = nextState;			}		}		public function getCurrentState():IGameState {			return this.currentState;		}		public function revertState():void {			trace(this.previousState.getName());			this.changeGameState(this.previousState.getName());		}		public function refreshState():void {			this.currentState.refresh();		}		public function getStatesRegistered():Boolean {			return statesRegistered;		}		public function setStatesRegistered(statesRegistered:Boolean):void{			this.statesRegistered = statesRegistered;		}		public function clearRegisteredStates():void {			this.statesRegistered = false;			this.gameStates = new Array();		}		private function checkGameStateExists(stateName:String):Boolean {			return this.gameStates[stateName] != null;		}	}	}
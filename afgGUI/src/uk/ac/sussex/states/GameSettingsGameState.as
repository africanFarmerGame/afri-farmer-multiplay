/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.states {	import uk.ac.sussex.controller.GameTypesReceivedCommand;	import uk.ac.sussex.controller.DisplayServerErrorMessageCommand;	import uk.ac.sussex.controller.DisplayServerMessageCommand;	import uk.ac.sussex.general.ApplicationFacade;//	import uk.ac.sussex.model.valueObjects.FormFieldOption;	import uk.ac.sussex.view.FormMediator;	import org.puremvc.as3.multicore.interfaces.IFacade;	import uk.ac.sussex.view.LogoutButtonMediator;	import flash.display.Sprite;	import uk.ac.sussex.controller.SaveGameDetailsCommand;	import uk.ac.sussex.controller.CancelGameSettingsCommand;	import uk.ac.sussex.controller.SuccessfulCreateGameCommand;	import uk.ac.sussex.model.*;	import uk.ac.sussex.model.valueObjects.requestParams.*;		public class GameSettingsGameState implements IGameState {		public static const NAME:String = "GameSettingsGameState";		public static const GAME_FORM_SUBMITTED:String = "GameFormSubmitted";		public static const GAME_FORM_CANCELLED:String = "GameFormCancelled";		public static const CREATE_GAME_SUCCESS:String = "CreateGameSuccess";		public static const GAME_TYPES_RECEIVED:String = "ReturnGameTypes";		public static const GAME_CREATE_REQUEST:String = "game.creategame";				public static const FORM_GAME_SETTINGS:String = "FormGameSettings";		public static const FIELD_GAME_TYPE:String = "GameType";		private static const FIELD_GAME_NAME:String = "GameName";		private static const FIELD_GAME_PWD:String = "Pwd";		private static const FIELD_NUM_PLAYERS:String = "NumPlayers";		private static const FIELD_VILLAGE_NAME:String = "VillageName";		private static const FIELD_TEAM_SELECTION:String = "TeamSelfSelect";		private static const FIELD_HOUSEHOLD_SIZE:String = "HouseholdSize";				private var facade:IFacade;				public function GameSettingsGameState(facade:IFacade) {			// constructor code			this.facade = facade;		}		public function displayState():void{			//register proxies			var gameTypesRequest:RequestProxy = new RequestProxy("game.fetchgametypes");			facade.registerProxy(gameTypesRequest);						var gameTypesReceived:IncomingDataProxy = new IncomingDataProxy(GAME_TYPES_RECEIVED, GAME_TYPES_RECEIVED);			gameTypesReceived.addDataParam(new DataParamArrayGameType("GameTypes"));			facade.registerProxy(gameTypesReceived);			gameTypesRequest.sendRequest();						var gameRequestData:RequestProxy = new RequestProxy(GAME_CREATE_REQUEST);			gameRequestData.addRequestParam(new DataParamString(FIELD_GAME_TYPE));			gameRequestData.addRequestParam(new DataParamString(FIELD_GAME_NAME));			gameRequestData.addRequestParam(new DataParamString(FIELD_GAME_PWD));			gameRequestData.addRequestParam(new DataParamInt(FIELD_NUM_PLAYERS));			gameRequestData.addRequestParam(new DataParamString(FIELD_VILLAGE_NAME));			gameRequestData.addRequestParam(new DataParamInt(FIELD_TEAM_SELECTION));			gameRequestData.addRequestParam(new DataParamInt(FIELD_HOUSEHOLD_SIZE));			this.facade.registerProxy(gameRequestData);						var createGameSuccess:IncomingDataProxy = new IncomingDataProxy("Creategame_success", CREATE_GAME_SUCCESS);			createGameSuccess.addDataParam(new DataParamString("message"));			this.facade.registerProxy(createGameSuccess);			facade.registerProxy(new IncomingDataErrorProxy("Creategame_error"));						var gameSettingsForm:FormProxy = new FormProxy(FORM_GAME_SETTINGS);			gameSettingsForm.addDropDown(FIELD_GAME_TYPE, "Game type:");			gameSettingsForm.addTextField(FIELD_GAME_NAME, "Game name:");			gameSettingsForm.addTextField(FIELD_NUM_PLAYERS, "Number of players:");			gameSettingsForm.addTextField(FIELD_VILLAGE_NAME, "Village Name: ");			gameSettingsForm.addHiddenTextField(FIELD_GAME_PWD, "Password: ", true);			//gameSettingsForm.addRadioButton(FIELD_TEAM_SELECTION, "Team Selection:", [new FormFieldOption("Random", "0"), new FormFieldOption("Self Selected", "1")]);			gameSettingsForm.addBackendData(FIELD_TEAM_SELECTION);			gameSettingsForm.addTextField(FIELD_HOUSEHOLD_SIZE, "Number of players per household:", false, "0-9");			gameSettingsForm.addButton("Cancel", GAME_FORM_CANCELLED);			gameSettingsForm.addButton("Submit", GAME_FORM_SUBMITTED);			this.facade.registerProxy(gameSettingsForm);						//register mediators			this.facade.registerMediator(new LogoutButtonMediator());			var formMediator:FormMediator = new FormMediator(FORM_GAME_SETTINGS, new Sprite());			this.facade.registerMediator(formMediator);			formMediator.setLabelWidth(300);			formMediator.addToMainScreen(20,20);						//register commands			this.facade.registerCommand(GAME_FORM_SUBMITTED, SaveGameDetailsCommand);			this.facade.registerCommand(GAME_FORM_CANCELLED, CancelGameSettingsCommand);			this.facade.registerCommand(CREATE_GAME_SUCCESS, SuccessfulCreateGameCommand);			facade.registerCommand(ApplicationFacade.INCOMING_MESSAGE, DisplayServerMessageCommand);			facade.registerCommand(ApplicationFacade.INCOMING_ERROR_MESSAGE, DisplayServerErrorMessageCommand);			facade.registerCommand(GAME_TYPES_RECEIVED, GameTypesReceivedCommand);		}		public function cleanUpState():void{			//remove proxies			this.facade.removeProxy("Creategame_success"+IncomingDataProxy.NAME);			this.facade.removeProxy(GAME_CREATE_REQUEST+RequestProxy.NAME);			this.facade.removeProxy("Creategame_error" + IncomingDataProxy.NAME);			this.facade.removeProxy(FORM_GAME_SETTINGS);									//remove mediators			this.facade.removeMediator(LogoutButtonMediator.NAME);			//this.facade.removeMediator(GameSettingsFormMediator.NAME);			this.facade.removeMediator(FORM_GAME_SETTINGS);						//remove commands			this.facade.removeCommand(GAME_FORM_SUBMITTED);			this.facade.removeCommand(GAME_FORM_CANCELLED);			this.facade.removeCommand(CREATE_GAME_SUCCESS);			this.facade.removeCommand(ApplicationFacade.INCOMING_MESSAGE);			this.facade.removeCommand(ApplicationFacade.INCOMING_ERROR_MESSAGE);			facade.removeCommand(GAME_TYPES_RECEIVED);		}		public function getName():String{			return NAME;		}		public function refresh():void {					}	}	}
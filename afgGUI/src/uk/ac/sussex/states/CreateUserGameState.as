package uk.ac.sussex.states {		import uk.ac.sussex.model.IncomingDataErrorProxy;	import uk.ac.sussex.view.FormMediator;	import uk.ac.sussex.model.FormProxy;	import org.puremvc.as3.multicore.interfaces.IFacade;	import flash.display.Sprite;		import uk.ac.sussex.general.ApplicationFacade;	import uk.ac.sussex.controller.*;	import uk.ac.sussex.model.RequestProxy;	import uk.ac.sussex.model.valueObjects.requestParams.DataParamString;	import uk.ac.sussex.model.IncomingDataProxy;		public class CreateUserGameState implements IGameState {		public static const NAME:String = "CreateUserGameState";		public static const CREATEUSER_FORM:String = "CreateUserForm";		public static const CREATEUSER_FORM_SUBMITTED:String = "Createuser_form_submitted";		public static const CREATEUSER_FORM_CANCELLED:String = "Createuser_form_cancelled";		public static const CREATEUSER_ERROR:String = "Createuser_error";		public static const CREATEUSER_SUCCESS:String = "Createuser_success";				private var facade:IFacade;				public function CreateUserGameState(applicationFacade:IFacade) {			// constructor code			this.facade = applicationFacade;		}		public function displayState():void {			var createUserProxy:RequestProxy = new RequestProxy("player.create");			createUserProxy.addRequestParam(new DataParamString("username"));			createUserProxy.addRequestParam(new DataParamString("newpwd"));			this.facade.registerProxy(createUserProxy);			var createUserFormProxy:FormProxy = new FormProxy(CreateUserGameState.CREATEUSER_FORM);			createUserFormProxy.addTextField("username", "Username: ");			createUserFormProxy.addHiddenTextField("newpwd", "Password: ");			createUserFormProxy.addButton("Cancel", CREATEUSER_FORM_CANCELLED);			createUserFormProxy.addButton("Submit", CREATEUSER_FORM_SUBMITTED);			this.facade.registerProxy(createUserFormProxy);						var createUserSuccessProxy:IncomingDataProxy = new IncomingDataProxy(CREATEUSER_SUCCESS, CREATEUSER_SUCCESS); 			this.facade.registerProxy(createUserSuccessProxy);			var createUserErrorProxy:IncomingDataErrorProxy = new IncomingDataErrorProxy(CREATEUSER_ERROR); 			this.facade.registerProxy(createUserErrorProxy);						this.facade.registerCommand(CREATEUSER_FORM_SUBMITTED, SubmitCreateUserCommand);			this.facade.registerCommand(CREATEUSER_FORM_CANCELLED, CancelCreateUserCommand);			//this.facade.registerCommand(CREATEUSER_ERROR, ReportErrorCreateUserCommand);			this.facade.registerCommand(CREATEUSER_SUCCESS, SuccessfulCreateUserCommand);			this.facade.registerCommand(ApplicationFacade.INCOMING_ERROR_MESSAGE, DisplayServerErrorMessageCommand);						var formMediator:FormMediator = new FormMediator(CREATEUSER_FORM, new Sprite());			this.facade.registerMediator(formMediator);			formMediator.addToMainScreen(20, 20);		}		public function cleanUpState():void {			this.facade.removeProxy("player.create" + RequestProxy.NAME);			this.facade.removeProxy(CREATEUSER_ERROR + IncomingDataProxy.NAME);			this.facade.removeProxy(CREATEUSER_SUCCESS + IncomingDataProxy.NAME);			this.facade.removeProxy(CREATEUSER_FORM);						this.facade.removeCommand(CREATEUSER_FORM_SUBMITTED);			this.facade.removeCommand(ApplicationFacade.LOGIN_SUCCESSFUL);			this.facade.removeCommand(CREATEUSER_FORM_CANCELLED);			//this.facade.removeCommand(CREATEUSER_ERROR);			this.facade.removeCommand(CREATEUSER_SUCCESS);			this.facade.removeCommand(ApplicationFacade.INCOMING_ERROR_MESSAGE);						//this.facade.removeMediator(NewUserFormMediator.NAME);			this.facade.removeMediator(CREATEUSER_FORM);		}		public function getName():String {			return NAME;		}		public function refresh():void {					}	}	}
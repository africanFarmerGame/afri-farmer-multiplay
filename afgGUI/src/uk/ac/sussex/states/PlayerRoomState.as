/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.states {	import uk.ac.sussex.controller.HearthAssetsUpdatedCommand;	import uk.ac.sussex.model.valueObjects.requestParams.DataParamArrayHearthAsset;	import uk.ac.sussex.serverhandlers.*;	import uk.ac.sussex.model.IncomingDataProxy;	import org.puremvc.as3.multicore.interfaces.IFacade;	/**	 * @author em97	 */	public class PlayerRoomState extends InGameState implements IGameState {		public static const GET_PC_DETAIL:String = "GetPlayerCharDetail";		public static const DISPLAY_PC_DETAIL:String = "DisplayPlayerCharDetail";				public function PlayerRoomState(facade:IFacade, name:String, roomDisplayName:String = null){			trace("PlayerRoomState sez: roomDisplayName is " + roomDisplayName);						super(facade, name, roomDisplayName);		}		override public function displayState() : void {			trace("PlayerRoomState sez: at display time my roomDisplayTitle is " + roomDisplayTitle);			super.displayState();			//register proxies									registerProxies();						//register commands			registerCommands();			//register mediators			registerMediators();		}		override public function cleanUpState() : void {			super.cleanUpState();			//remove mediators			removeMediators();			//remove commands			removeCommands();			//remove proxies			removeProxies();			}				private function registerProxies():void {			//This comes into play if someone else in the family is buying and selling stuff at the market. 			var hearthAssetUpdate:IncomingDataProxy = new IncomingDataProxy(MarketHandlers.HEARTH_ASSETS_UPDATED, MarketHandlers.HEARTH_ASSETS_UPDATED);			hearthAssetUpdate.addDataParam(new DataParamArrayHearthAsset("HearthAssets"));			facade.registerProxy(hearthAssetUpdate);		}		private function removeProxies():void {			facade.removeProxy(MarketHandlers.HEARTH_ASSETS_UPDATED + IncomingDataProxy.NAME);		}		private function registerCommands():void {			facade.registerCommand(MarketHandlers.HEARTH_ASSETS_UPDATED, HearthAssetsUpdatedCommand);		}		private function removeCommands():void {			facade.removeCommand(MarketHandlers.HEARTH_ASSETS_UPDATED);		}		private function registerMediators():void {					}		private function removeMediators():void {					}	}}
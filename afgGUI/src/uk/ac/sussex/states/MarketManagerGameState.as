package uk.ac.sussex.states {	import org.puremvc.as3.multicore.interfaces.IFacade;		import uk.ac.sussex.model.*;	import uk.ac.sussex.serverhandlers.MarketHandlers;	import uk.ac.sussex.model.valueObjects.requestParams.*;	import uk.ac.sussex.view.MarketAssetsListMediator;	import uk.ac.sussex.view.FormMediator;	import uk.ac.sussex.view.SubMenuMediator;	import uk.ac.sussex.controller.*;		import flash.display.Sprite;	/**	 * @author em97	 */	public class MarketManagerGameState extends ManagerRoomState implements IGameState {		public static const NAME:String = "MarketManagerGameState";		public static const LOCATION_NAME:String = "MARKET";				private static const EDIT_ASSET_SUBMITTED:String = "EditAssetSubmitted";		private static const EDIT_ASSET_CANCELLED:String = "EditAssetCancelled";				public function MarketManagerGameState(facade : IFacade) {			super(facade, NAME);		}		override public function displayState():void{			trace("You've reached the Market Manager Game State");			super.displayState();						this.registerProxies();			this.registerMediators();			this.registerCommands();		}		override public function cleanUpState():void{			this.removeProxies();			this.removeMediators();			this.removeCommands();						super.cleanUpState();		}		private function registerProxies():void {			facade.registerProxy(new MarketAssetsListProxy());			var marketAssetsRequestProxy:RequestProxy = new RequestProxy(MarketHandlers.MANAGE_MARKET_ASSETS);			facade.registerProxy(marketAssetsRequestProxy);			marketAssetsRequestProxy.sendRequest();			var marketAssetsIncomingProxy:IncomingDataProxy = new IncomingDataProxy(MarketHandlers.MANAGER_MARKET_ASSET_DETAILS, MarketHandlers.MANAGER_MARKET_ASSET_DETAILS);			marketAssetsIncomingProxy.addDataParam(new DataParamArrayMarketAsset("AssetDetails"));			facade.registerProxy(marketAssetsIncomingProxy);						var editAssetsForm:FormProxy = new FormProxy(MarketHandlers.EDIT_ASSET_FORM);			editAssetsForm.addDisplayText(DataParamArrayMarketAsset.FIELD_ASSETNAME, "Editing Asset:");			editAssetsForm.addTextField(DataParamArrayMarketAsset.FIELD_AMOUNT, "Amount");			editAssetsForm.addTextField(DataParamArrayMarketAsset.FIELD_BUYPRICE, "Market Buys At:");			editAssetsForm.addTextField(DataParamArrayMarketAsset.FIELD_SELLPRICE, "Market Sells At:");			editAssetsForm.addBackendData(DataParamArrayMarketAsset.FIELD_ID);			editAssetsForm.addButton("Cancel", EDIT_ASSET_CANCELLED, false);			editAssetsForm.addButton("Save Changes", EDIT_ASSET_SUBMITTED);			facade.registerProxy(editAssetsForm);						var updateAssetRequestProxy:RequestProxy = new RequestProxy(MarketHandlers.UPDATE_MARKET_ASSET);			updateAssetRequestProxy.addRequestParam(new DataParamInt(DataParamArrayMarketAsset.FIELD_ID));			updateAssetRequestProxy.addRequestParam(new DataParamNumber(DataParamArrayMarketAsset.FIELD_AMOUNT));			updateAssetRequestProxy.addRequestParam(new DataParamNumber(DataParamArrayMarketAsset.FIELD_BUYPRICE));			updateAssetRequestProxy.addRequestParam(new DataParamNumber(DataParamArrayMarketAsset.FIELD_SELLPRICE));			facade.registerProxy(updateAssetRequestProxy);						var subMenuProxy:SubMenuListProxy = new SubMenuListProxy();			facade.registerProxy(subMenuProxy);			subMenuProxy.addSubMenuItem(MarketHandlers.GM_SUB_MENU_LIST);			subMenuProxy.addSubMenuItem(MarketHandlers.GM_SUB_MENU_EDIT);			subMenuProxy.setDefaultMenuItem(MarketHandlers.GM_SUB_MENU_LIST);		}		private function removeProxies():void {			facade.removeProxy(MarketHandlers.MANAGE_MARKET_ASSETS + RequestProxy.NAME);			facade.removeProxy(MarketHandlers.MANAGER_MARKET_ASSET_DETAILS + IncomingDataProxy.NAME);			facade.removeProxy(MarketAssetsListProxy.NAME);			facade.removeProxy(MarketHandlers.EDIT_ASSET_FORM);			facade.removeProxy(SubMenuListProxy.NAME);		}		private function registerCommands():void {			facade.registerCommand(SubMenuMediator.SUB_MENU_ITEM_SELECTED, SubMenuMarketManagerCommand);			facade.registerCommand(MarketHandlers.MANAGER_MARKET_ASSET_DETAILS, MarketAssetsStoreCommand);			facade.registerCommand(EDIT_ASSET_CANCELLED, CancelMarketAssetEditCommand);			facade.registerCommand(EDIT_ASSET_SUBMITTED, SubmitMarketAssetUpdateCommand);			facade.registerCommand(MarketHandlers.EDIT_ASSET_REQUESTED, EditMarketAssetCommand);		}		private function removeCommands():void {			facade.removeCommand(SubMenuMediator.SUB_MENU_ITEM_SELECTED);			facade.removeCommand(MarketHandlers.MANAGER_MARKET_ASSET_DETAILS);			facade.removeCommand(EDIT_ASSET_CANCELLED);			facade.removeCommand(MarketHandlers.EDIT_ASSET_REQUESTED);		}		private function registerMediators():void {			var submenuMediator:SubMenuMediator = new SubMenuMediator();			facade.registerMediator(submenuMediator);			facade.registerMediator(new MarketAssetsListMediator(new Sprite()));			facade.registerMediator(new FormMediator(MarketHandlers.EDIT_ASSET_FORM, new Sprite()));						submenuMediator.moveToDefaultButton();		}		private function removeMediators():void {			facade.removeMediator(MarketAssetsListMediator.NAME);			facade.removeMediator(MarketHandlers.EDIT_ASSET_FORM);			facade.removeMediator(SubMenuMediator.NAME);		}	}}
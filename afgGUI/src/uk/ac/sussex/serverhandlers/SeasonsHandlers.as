/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.serverhandlers {	import uk.ac.sussex.controller.WeatherReceivedCommand;	import uk.ac.sussex.controller.SeasonChangedCommand;	import uk.ac.sussex.controller.SeasonsCurrentCommand;	import flash.display.Sprite;	import uk.ac.sussex.view.SeasonsDisplayMediator;	import uk.ac.sussex.model.valueObjects.requestParams.*;	import uk.ac.sussex.model.*;	import org.puremvc.as3.multicore.interfaces.IFacade;	/**	 * @author em97	 */	public class SeasonsHandlers {		public static const GET_SEASONS:String = "seasons.get_seasons";		public static const GET_CURRENT_SEASON:String = "seasons.current_season";		public static const SUBMIT_STAGE_CHANGE_REQUEST:String = "seasons.change_stage";		public static const CHANGE_STAGE_ERROR:String = "change_stage_error";				public static const SEASONS_LIST:String = "SeasonsList";		public static const SEASONS_ERROR:String = "seasonsError";		public static const GET_SEASONS_ERROR:String = "get_seasons_error";				public static const CURRENT_SEASON:String = "CurrentSeason";		public static const CURRENT_SEASON_DISPLAY:String = "CurrentSeasonDisplay";		public static const CURRENT_SEASON_NAME:String = "CurrentSeasonName";		public static const CURRENT_SEASON_ERROR:String = "current_season_error";		public static const CURRENT_GAME_YEAR:String = "CurrentGameYear";				public static const CURRENT_SEASON_CHANGE:String = "GameStageChange";		public static const UPDATE_GAME_YEAR:String = "UpdateGameYear";				public static const CHANGE_STAGE_FORM:String = "ChangeStageForm";		public static const CHANGE_STAGE_CURRENT:String = "CurrentStage";		public static const CHANGE_STAGE_NEXT:String = "NextStage";		public static const CHANGE_STAGE_SUBMIT:String = "SubmitStageChange";		public static const CURRENT_STAGE_NAME:String = "CurrentStageName";		public static const SEASON_NOTIFICATION:String = "SeasonNotification";				public static const GET_WEATHER:String = "seasons.get_weather";		public static const GET_WEATHER_ERROR:String = "get_weather_error";		public static const WEATHER_RECEIVED:String = "weather";		public static const WEATHER:String = "Weather";		public static const WEATHER_SEASON:String = "WeatherSeason";		public static const WEATHER_LIST:String = "WeatherList";				public static function registerComponents(facade:IFacade):void {			var currentSeasonRequest:RequestProxy = new RequestProxy(SeasonsHandlers.GET_CURRENT_SEASON);			facade.registerProxy(currentSeasonRequest);			currentSeasonRequest.sendRequest();						facade.registerProxy(new IncomingDataErrorProxy(SEASONS_ERROR));						//This deals with the result of asking for the current season.			var currentSeasonUpdated:IncomingDataProxy = new IncomingDataProxy(SeasonsHandlers.CURRENT_SEASON, SeasonsHandlers.CURRENT_SEASON);			currentSeasonUpdated.addDataParam(new DataParamInt(SeasonsHandlers.CURRENT_SEASON_DISPLAY));			currentSeasonUpdated.addDataParam(new DataParamString(SeasonsHandlers.CURRENT_SEASON_NAME));			currentSeasonUpdated.addDataParam(new DataParamString(SeasonsHandlers.CURRENT_STAGE_NAME));			currentSeasonUpdated.addDataParam(new DataParamInt(SeasonsHandlers.CURRENT_GAME_YEAR));			facade.registerProxy(currentSeasonUpdated);						//This listens for the notification of the games manager changing the season.			var gameStageChanged:IncomingDataProxy = new IncomingDataProxy(SeasonsHandlers.CURRENT_SEASON_CHANGE, SeasonsHandlers.CURRENT_SEASON_CHANGE);			gameStageChanged.addDataParam(new DataParamInt(SeasonsHandlers.CURRENT_SEASON_DISPLAY));			gameStageChanged.addDataParam(new DataParamString(SeasonsHandlers.CURRENT_SEASON_NAME));			gameStageChanged.addDataParam(new DataParamString(SeasonsHandlers.CURRENT_STAGE_NAME));			gameStageChanged.addDataParam(new DataParamInt(SeasonsHandlers.CURRENT_GAME_YEAR));			gameStageChanged.addDataParam(new DataParamSeasonNotification(SeasonsHandlers.SEASON_NOTIFICATION));			facade.registerProxy(gameStageChanged);						var weatherRequest:RequestProxy = new RequestProxy(SeasonsHandlers.GET_WEATHER);			facade.registerProxy(weatherRequest);			weatherRequest.sendRequest();						facade.registerProxy(new IncomingDataErrorProxy(SeasonsHandlers.GET_WEATHER_ERROR));						var weatherIncoming:IncomingDataProxy = new IncomingDataProxy(SeasonsHandlers.WEATHER_RECEIVED, SeasonsHandlers.WEATHER_RECEIVED);			weatherIncoming.addDataParam(new DataParamArrayWeather(SeasonsHandlers.WEATHER_LIST));			facade.registerProxy(weatherIncoming);						//Register the mediator			facade.registerMediator(new SeasonsDisplayMediator(new Sprite()));						//Register the commands.			facade.registerCommand(SeasonsHandlers.CURRENT_SEASON, SeasonsCurrentCommand);			facade.registerCommand(SeasonsHandlers.CURRENT_SEASON_CHANGE, SeasonChangedCommand);			facade.registerCommand(SeasonsHandlers.WEATHER_RECEIVED, WeatherReceivedCommand);		}				public static function removeComponents(facade:IFacade):void {			facade.removeProxy(SeasonsHandlers.GET_CURRENT_SEASON + RequestProxy.NAME);			facade.removeProxy(SeasonsHandlers.SEASONS_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(SeasonsHandlers.CURRENT_SEASON + IncomingDataProxy.NAME);			facade.removeProxy(SeasonsHandlers.CURRENT_SEASON_CHANGE + IncomingDataProxy.NAME);			facade.removeProxy(SeasonsHandlers.GET_WEATHER + RequestProxy.NAME);			facade.removeProxy(SeasonsHandlers.GET_WEATHER_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(SeasonsHandlers.WEATHER_RECEIVED + IncomingDataProxy.NAME);						facade.removeMediator(SeasonsDisplayMediator.NAME);						facade.removeCommand(SeasonsHandlers.CURRENT_SEASON);			facade.removeCommand(SeasonsHandlers.CURRENT_SEASON_CHANGE);		}	}}
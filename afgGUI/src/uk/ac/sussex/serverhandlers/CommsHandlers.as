/**This file is part of the African Farmer Game - Multiplayer version.African Farmer Game - Multiplayer version is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.African Farmer Game - Multiplayer version is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with African Farmer Game - Multiplayer version.  If not, see <http://www.gnu.org/licenses/>.	**/package uk.ac.sussex.serverhandlers {	import flash.display.Sprite;	import uk.ac.sussex.general.ApplicationFacade;	import uk.ac.sussex.model.valueObjects.requestParams.*;	import uk.ac.sussex.model.*;	import uk.ac.sussex.view.*;	import uk.ac.sussex.controller.*;	import org.puremvc.as3.multicore.interfaces.IFacade;	/**	 * @author em97	 */	public class CommsHandlers {				public static const TALK_MESSAGE:String = "comms.talk" ;		public static const TALK_MESSAGE_RECEIVED:String = "talk_received";				public static const TICKER_MESSAGE_OUTCOING:String = "comms.tickermessage";		public static const TICKER_MESSAGE_CLEAR:String = "comms.clear_ticker";		public static const TICKER_MESSAGE_CLEAR_INCOMING:String = "ClearTicker";		public static const TICKER_MESSAGE_INCOMING:String = "TickerMessage";		public static const TICKER_REQUEST:String = "comms.fetch_ticker";				public static const COMMS_ERROR:String = "commsError";				public static const UPDATE_COMMS_TALK:String = "UpdateCommsTalk";		public static const UPDATE_COMMS_PHONE:String = "UpdateCommsPhone";		public static const UPDATE_COMMS_SMS:String = "UpdateCommsSMS";		public static const UPDATE_COMMS_MAIL:String = "UpdateCommsMail";		public static const SEND_TICKER:String = "SendTicker";				public static const SEND_TALK_MESSAGE:String = "SendTalkMessage";		public static const SEND_PHONE_MESSAGE:String = "SendPhoneMessage";		public static const SEND_MAIL_MESSAGE:String = "SendMailMessage";		public static const SEND_SMS_MESSAGE:String = "SendSMSMessage";				public static const RECEIVE_TALK_MESSAGE:String = "ReceiveTalkMessage";				public static const FETCH_ALL_PLAYERS:String = "comms.fetch_all_members";		public static const ALL_PLAYERS_RECEIVED:String = "AllGamePCs";				public static const FETCH_TEXT_MESSAGES:String = "comms.read_sms_messages";		public static const TEXT_MESSAGES_RECEIVED:String = "TextMessages";		public static const TEXT_MESSAGE_RECEIVED:String = "TextMessage";		public static const TEXT_MESSAGES_ERROR:String = "read_sms_messages_error";		public static const SEND_TEXT_MESSAGE:String = "comms.send_sms_message";		public static const SEND_TEXT_MESSAGE_SUCCESS:String = "send_message_success";		public static const SEND_TEXT_MESSAGE_ERROR:String = "send_sms_message_error";		public static const UPDATE_TEXT_MESSAGE:String = "comms.update_sms_message";		public static const UPDATE_TEXT_MESSAGE_ERROR:String = "update_sms_message_error";				public static const FETCH_CALL_HISTORY:String = "comms.fetch_call_history";		public static const CALL_HISTORY_RECEIVED:String = "CallHistory";		public static const CALL_HISTORY_ERROR:String = "fetch_call_history_error";				public static const START_CALL:String = "comms.start_call";		public static const ANSWER_CALL:String = "comms.answer_call";		public static const TALK_PHONE_MESSAGE:String = "comms.talk_phone";		public static const END_CALL:String = "comms.end_call";				public static const RECIPIENT_ID:String = "CallToId";		public static const CALLER_ID:String = "CallFromId";		public static const CALLER_NAME:String = "CallFromName";		public static const INITIATE_CALL:String = "InitiateCall";		public static const START_CALL_ERROR:String = "start_call_error";		public static const CALL_ENDED:String = "EndCall";		public static const END_CALL_ERROR:String = "end_call_error";		public static const CALL_RINGING:String = "Ringing";		public static const INCOMING_CALL:String = "IncomingCall";		public static const CALL_ANSWERED:String = "CallAnswered";		public static const ANSWER_CALL_ERROR:String = "answer_call_error";		public static const TALK_PHONE_MESSAGE_ERROR:String = "talk_phone_error";		public static const PHONE_MESSAGE_RECEIVED:String = "talk_phone_received";				public static const FETCH_MESSAGES:String = "comms.fetch_messages";		public static const FETCH_MESSAGES_ERROR:String = "fetch_messages_error";		public static const MESSAGES_RECEIVED:String = "MessagesReceived";		public static const MESSAGES:String = "Messages";		public static const UPDATE_MESSAGE:String = "comms.update_message";		public static const UPDATE_MESSAGE_ERROR:String = "update_message_error";				public static const DIR_TALK_LIST:String = "TalkList";		public static const DIR_ALL_PCS:String = "AllPCList";						/**		 * 		 */		 public static function registerComponents(facade:IFacade):void {		 	//Generic			var allPlayersProxy:PCListProxy = facade.retrieveProxy(CommsHandlers.DIR_ALL_PCS) as PCListProxy;			if(allPlayersProxy == null){				var allPlayersRequest:RequestProxy = new RequestProxy(CommsHandlers.FETCH_ALL_PLAYERS);				facade.registerProxy(allPlayersRequest);				var allPlayersIncoming:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.ALL_PLAYERS_RECEIVED, CommsHandlers.ALL_PLAYERS_RECEIVED);				allPlayersIncoming.addDataParam(new DataParamArrayPlayerChar("players"));				facade.registerProxy(allPlayersIncoming);				allPlayersRequest.sendRequest();								facade.registerCommand(CommsHandlers.ALL_PLAYERS_RECEIVED, AllPlayersReceivedCommand);			}			facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.COMMS_ERROR));			facade.registerMediator(new CommsViewMediator(new Sprite()));					 	//Ticker detail		 	var tickerProxy:TickerProxy = facade.retrieveProxy(TickerProxy.NAME) as TickerProxy;			if(tickerProxy == null) {				//Need to fetch the latest ticker message. 				var tickerRequest:RequestProxy = new RequestProxy(CommsHandlers.TICKER_REQUEST);				facade.registerProxy(tickerRequest);				tickerRequest.sendRequest();			}			var incomingTickerText:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TICKER_MESSAGE_INCOMING, CommsHandlers.TICKER_MESSAGE_INCOMING);			incomingTickerText.addDataParam(new DataParamString("Message"));			facade.registerProxy(incomingTickerText);						var incomingClearTicker:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TICKER_MESSAGE_CLEAR_INCOMING, 																			  CommsHandlers.TICKER_MESSAGE_INCOMING);			facade.registerProxy(incomingClearTicker);			facade.registerCommand(CommsHandlers.TICKER_MESSAGE_INCOMING, CommsTickerMessageReceived);						//Text messages			var sendTextMessage:RequestProxy = new RequestProxy(CommsHandlers.SEND_TEXT_MESSAGE);			sendTextMessage.addRequestParam(new DataParamInt("Receiver"));			sendTextMessage.addRequestParam(new DataParamString("Message"));			facade.registerProxy(sendTextMessage);						var sendTextMessageError:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.SEND_TEXT_MESSAGE_ERROR, ApplicationFacade.INCOMING_ERROR_MESSAGE);			sendTextMessageError.addDataParam(new DataParamString("message"));			facade.registerProxy(sendTextMessageError);						var sendTextMessageSuccess:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.SEND_TEXT_MESSAGE_SUCCESS, ApplicationFacade.INCOMING_MESSAGE);			sendTextMessageSuccess.addDataParam(new DataParamString("message"));			facade.registerProxy(sendTextMessageSuccess);						var smsListProxy:TextMessageListProxy = facade.retrieveProxy(TextMessageListProxy.NAME) as TextMessageListProxy;			if(smsListProxy == null){				trace("CommsHandlers sez: the smslistProxy was appropriately null.");				var getTextsRequest:RequestProxy = new RequestProxy(CommsHandlers.FETCH_TEXT_MESSAGES);				facade.registerProxy(getTextsRequest);				getTextsRequest.sendRequest();				var incomingTexts:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TEXT_MESSAGES_RECEIVED, CommsHandlers.TEXT_MESSAGES_RECEIVED);				incomingTexts.addDataParam(new DataParamArrayTextMessage("textMessages"));				facade.registerProxy(incomingTexts);				var incomingTextsError:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TEXT_MESSAGES_ERROR, ApplicationFacade.INCOMING_ERROR_MESSAGE);				incomingTextsError.addDataParam(new DataParamString("message"));				facade.registerProxy(incomingTextsError);				facade.registerCommand(CommsHandlers.TEXT_MESSAGES_RECEIVED, TextMessagesReceivedCommand);			}						var receiveSMS:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TEXT_MESSAGE_RECEIVED, CommsHandlers.TEXT_MESSAGE_RECEIVED);			receiveSMS.addDataParam(new DataParamTextMessage("textMessage"));			facade.registerProxy(receiveSMS);			var updateSMS:RequestProxy = new RequestProxy(CommsHandlers.UPDATE_TEXT_MESSAGE);			updateSMS.addRequestParam(new DataParamTextMessage("textMessage"));			facade.registerProxy(updateSMS);						facade.registerCommand(CommsViewMediator.SEND_TEXTMESSAGE, SendTextMessageCommand);						//Talking			facade.registerProxy(new TalkMessageListProxy());						var sendTalkMessage:RequestProxy = new RequestProxy(CommsHandlers.TALK_MESSAGE);			sendTalkMessage.addRequestParam(new DataParamString("playermessage"));			facade.registerProxy(sendTalkMessage);						var receiveTalkMessage:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.TALK_MESSAGE_RECEIVED, CommsHandlers.RECEIVE_TALK_MESSAGE);			receiveTalkMessage.addDataParam(new DataParamString("playermessage"));			receiveTalkMessage.addDataParam(new DataParamString("author"));			receiveTalkMessage.addDataParam(new DataParamInt("authorid"));			facade.registerProxy(receiveTalkMessage);						//Phoning - probably need to do something with this other than just send request every room visit. Rethink.			facade.registerProxy(new CallHistoryProxy());			 			var fetchCallHistory:RequestProxy = new RequestProxy(CommsHandlers.FETCH_CALL_HISTORY);			facade.registerProxy(fetchCallHistory);			fetchCallHistory.sendRequest();						var callHistoryReceived:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.CALL_HISTORY_RECEIVED, CommsHandlers.CALL_HISTORY_RECEIVED);			callHistoryReceived.addDataParam(new DataParamArrayCallHistory("Outgoing"));			callHistoryReceived.addDataParam(new DataParamArrayCallHistory("Incoming"));			facade.registerProxy(callHistoryReceived);						var callHistoryError:IncomingDataErrorProxy = new IncomingDataErrorProxy(CommsHandlers.CALL_HISTORY_ERROR);			facade.registerProxy(callHistoryError);						var startCallProxy:RequestProxy = new RequestProxy(CommsHandlers.START_CALL);			startCallProxy.addRequestParam(new DataParamInt(CommsHandlers.RECIPIENT_ID));			facade.registerProxy(startCallProxy);						facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.START_CALL_ERROR));			facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.END_CALL_ERROR));			facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.ANSWER_CALL_ERROR));						var endCallProxy:RequestProxy = new RequestProxy(CommsHandlers.END_CALL);			endCallProxy.addRequestParam(new DataParamInt("CallId"));			facade.registerProxy(endCallProxy);						var callEndedProxy:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.CALL_ENDED, CommsHandlers.CALL_ENDED);			callEndedProxy.addDataParam(new DataParamString("message"));			facade.registerProxy(callEndedProxy);						var callRingingProxy:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.CALL_RINGING, CommsHandlers.CALL_RINGING);			callRingingProxy.addDataParam(new DataParamString("message"));			callRingingProxy.addDataParam(new DataParamInt("CallId"));			facade.registerProxy(callRingingProxy);						var incomingCallProxy:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.INCOMING_CALL, CommsHandlers.INCOMING_CALL);			incomingCallProxy.addDataParam(new DataParamInt(CommsHandlers.CALLER_ID));			incomingCallProxy.addDataParam(new DataParamString(CommsHandlers.CALLER_NAME));			incomingCallProxy.addDataParam(new DataParamInt("CallId"));			facade.registerProxy(incomingCallProxy);						var answerCallRequest:RequestProxy = new RequestProxy(CommsHandlers.ANSWER_CALL);			answerCallRequest.addRequestParam(new DataParamInt("CallId"));			facade.registerProxy(answerCallRequest);						var callAnsweredProxy:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.CALL_ANSWERED, CommsHandlers.CALL_ANSWERED);			callAnsweredProxy.addDataParam(new DataParamNumber("Answered"));			callAnsweredProxy.addDataParam(new DataParamInt("CallId"));			facade.registerProxy(callAnsweredProxy);						var sendPhoneMessageRequest:RequestProxy = new RequestProxy(CommsHandlers.TALK_PHONE_MESSAGE);			sendPhoneMessageRequest.addRequestParam(new DataParamInt("CallId"));			sendPhoneMessageRequest.addRequestParam(new DataParamString("message"));			facade.registerProxy(sendPhoneMessageRequest);						facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.TALK_PHONE_MESSAGE_ERROR));						var incomingPhoneMessage:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.PHONE_MESSAGE_RECEIVED, CommsHandlers.PHONE_MESSAGE_RECEIVED);			incomingPhoneMessage.addDataParam(new DataParamInt("authorid"));			incomingPhoneMessage.addDataParam(new DataParamString("author"));			incomingPhoneMessage.addDataParam(new DataParamString("message"));			facade.registerProxy(incomingPhoneMessage);						//System messages			facade.registerProxy(new MessageListProxy());						var fetchMessages:RequestProxy = new RequestProxy(CommsHandlers.FETCH_MESSAGES);			facade.registerProxy(fetchMessages);			fetchMessages.sendRequest();						facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.FETCH_MESSAGES_ERROR));						var messagesReceived:IncomingDataProxy = new IncomingDataProxy(CommsHandlers.MESSAGES_RECEIVED, CommsHandlers.MESSAGES_RECEIVED);			messagesReceived.addDataParam(new DataParamArrayMessage(CommsHandlers.MESSAGES));			facade.registerProxy(messagesReceived);						var updateMessage:RequestProxy = new RequestProxy(CommsHandlers.UPDATE_MESSAGE);			updateMessage.addRequestParam(new DataParamMessage("Message"));			facade.registerProxy(updateMessage);						facade.registerProxy(new IncomingDataErrorProxy(CommsHandlers.UPDATE_MESSAGE_ERROR));						facade.registerCommand(CommsHandlers.SEND_TALK_MESSAGE, CommsSendMessageTalk);			facade.registerCommand(CommsHandlers.RECEIVE_TALK_MESSAGE, TalkMessageReceivedCommand);			facade.registerCommand(CommsHandlers.TEXT_MESSAGE_RECEIVED, TextMessageReceivedCommand);			facade.registerCommand(TextMessageListProxy.TEXT_MESSAGE_UPDATED, UpdateTextMessageCommand);			facade.registerCommand(CommsHandlers.CALL_HISTORY_RECEIVED, ReceivedCallHistoryCommand);			facade.registerCommand(CommsHandlers.INITIATE_CALL, InitiatePhoneCallCommand);			facade.registerCommand(CommsHandlers.INCOMING_CALL, ReceiveIncomingCallCommand);			facade.registerCommand(CommsHandlers.END_CALL, TerminateCallCommand);			facade.registerCommand(CommsHandlers.CALL_RINGING, PhoneRingingCommand);			facade.registerCommand(CommsHandlers.ANSWER_CALL, AnswerPhoneCommand);			facade.registerCommand(CommsHandlers.CALL_ANSWERED, PhoneAnsweredCommand);			facade.registerCommand(CommsHandlers.CALL_ENDED, PhoneCallEndedCommand);			facade.registerCommand(CommsHandlers.SEND_PHONE_MESSAGE, SendPhoneMessageCommand);			facade.registerCommand(CommsHandlers.PHONE_MESSAGE_RECEIVED, ReceivePhoneMessageCommand);			facade.registerCommand(CommsHandlers.MESSAGES_RECEIVED, MessagesReceivedCommand);			facade.registerCommand(MessageListProxy.MESSAGE_UPDATED, UpdateMessageCommand);		 }		 public static function removeComponents(facade:IFacade):void {		 	//Remove proxies		 	facade.removeProxy(TalkMessageListProxy.NAME);			facade.removeProxy(CommsHandlers.COMMS_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TALK_MESSAGE + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.TALK_MESSAGE_RECEIVED + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TICKER_MESSAGE_INCOMING + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TICKER_MESSAGE_CLEAR_INCOMING + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TICKER_REQUEST + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.SEND_TEXT_MESSAGE + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.SEND_TEXT_MESSAGE_SUCCESS + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.SEND_TEXT_MESSAGE_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TEXT_MESSAGE_RECEIVED + IncomingDataProxy.NAME);			facade.removeProxy(CallHistoryProxy.NAME);			facade.removeProxy(CommsHandlers.FETCH_CALL_HISTORY + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.CALL_HISTORY_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.CALL_HISTORY_RECEIVED + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.START_CALL + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.END_CALL + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.CALL_ENDED + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.CALL_RINGING + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.INCOMING_CALL + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.ANSWER_CALL + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.ANSWER_CALL_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.START_CALL_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.END_CALL_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.CALL_ANSWERED + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.TALK_PHONE_MESSAGE + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.TALK_PHONE_MESSAGE_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.FETCH_MESSAGES + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.FETCH_MESSAGES_ERROR + IncomingDataProxy.NAME);			facade.removeProxy(CommsHandlers.MESSAGES_RECEIVED + IncomingDataProxy.NAME);			facade.removeProxy(MessageListProxy.NAME);			facade.removeProxy(CommsHandlers.UPDATE_MESSAGE + RequestProxy.NAME);			facade.removeProxy(CommsHandlers.UPDATE_MESSAGE_ERROR + IncomingDataProxy.NAME);						//Remove mediators			facade.removeMediator(CommsViewMediator.NAME);			//Remove commands			facade.removeCommand(CommsHandlers.SEND_TALK_MESSAGE);			facade.removeCommand(CommsHandlers.TICKER_MESSAGE_INCOMING);			facade.removeCommand(CommsHandlers.ALL_PLAYERS_RECEIVED);			facade.removeCommand(TextMessageListProxy.TEXT_MESSAGE_UPDATED);			facade.removeCommand(CommsViewMediator.SEND_TEXTMESSAGE);			facade.removeCommand(CommsHandlers.TEXT_MESSAGE_RECEIVED);			facade.removeCommand(CommsHandlers.RECEIVE_TALK_MESSAGE);			facade.removeCommand(CommsHandlers.INITIATE_CALL);			facade.removeCommand(CommsHandlers.END_CALL);			facade.removeCommand(CommsHandlers.CALL_RINGING);			facade.removeCommand(CommsHandlers.ANSWER_CALL);			facade.removeCommand(CommsHandlers.CALL_ANSWERED);			facade.removeCommand(CommsHandlers.CALL_ENDED);			facade.removeCommand(CommsHandlers.SEND_PHONE_MESSAGE);			facade.removeCommand(CommsHandlers.PHONE_MESSAGE_RECEIVED);			facade.removeCommand(CommsHandlers.MESSAGES_RECEIVED);			facade.removeCommand(MessageListProxy.MESSAGE_UPDATED);		 }	}}